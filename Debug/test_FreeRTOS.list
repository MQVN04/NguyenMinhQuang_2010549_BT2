
test_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004600  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f8  080047f8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004800  08004800  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000045ac  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200045c0  200045c0  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bc19  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000021f9  00000000  00000000  0002bca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000aa8  00000000  00000000  0002dea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000827  00000000  00000000  0002e948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022862  00000000  00000000  0002f16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000daa3  00000000  00000000  000519d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d16df  00000000  00000000  0005f474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002ab8  00000000  00000000  00130b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0013360c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004770 	.word	0x08004770

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004770 	.word	0x08004770

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b970 	b.w	80004d4 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	460f      	mov	r7, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4694      	mov	ip, r2
 8000220:	d965      	bls.n	80002ee <__udivmoddi4+0xe2>
 8000222:	fab2 f382 	clz	r3, r2
 8000226:	b143      	cbz	r3, 800023a <__udivmoddi4+0x2e>
 8000228:	fa02 fc03 	lsl.w	ip, r2, r3
 800022c:	f1c3 0220 	rsb	r2, r3, #32
 8000230:	409f      	lsls	r7, r3
 8000232:	fa20 f202 	lsr.w	r2, r0, r2
 8000236:	4317      	orrs	r7, r2
 8000238:	409c      	lsls	r4, r3
 800023a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023e:	fa1f f58c 	uxth.w	r5, ip
 8000242:	fbb7 f1fe 	udiv	r1, r7, lr
 8000246:	0c22      	lsrs	r2, r4, #16
 8000248:	fb0e 7711 	mls	r7, lr, r1, r7
 800024c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000250:	fb01 f005 	mul.w	r0, r1, r5
 8000254:	4290      	cmp	r0, r2
 8000256:	d90a      	bls.n	800026e <__udivmoddi4+0x62>
 8000258:	eb1c 0202 	adds.w	r2, ip, r2
 800025c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000260:	f080 811c 	bcs.w	800049c <__udivmoddi4+0x290>
 8000264:	4290      	cmp	r0, r2
 8000266:	f240 8119 	bls.w	800049c <__udivmoddi4+0x290>
 800026a:	3902      	subs	r1, #2
 800026c:	4462      	add	r2, ip
 800026e:	1a12      	subs	r2, r2, r0
 8000270:	b2a4      	uxth	r4, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	fb00 f505 	mul.w	r5, r0, r5
 8000282:	42a5      	cmp	r5, r4
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x90>
 8000286:	eb1c 0404 	adds.w	r4, ip, r4
 800028a:	f100 32ff 	add.w	r2, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x294>
 8000292:	42a5      	cmp	r5, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x294>
 8000298:	4464      	add	r4, ip
 800029a:	3802      	subs	r0, #2
 800029c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11e      	cbz	r6, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40dc      	lsrs	r4, r3
 80002a8:	2300      	movs	r3, #0
 80002aa:	e9c6 4300 	strd	r4, r3, [r6]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0xbc>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80ed 	beq.w	8000496 <__udivmoddi4+0x28a>
 80002bc:	2100      	movs	r1, #0
 80002be:	e9c6 0500 	strd	r0, r5, [r6]
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	d149      	bne.n	8000364 <__udivmoddi4+0x158>
 80002d0:	42ab      	cmp	r3, r5
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xce>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2be>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb65 0203 	sbc.w	r2, r5, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	4617      	mov	r7, r2
 80002e4:	2e00      	cmp	r6, #0
 80002e6:	d0e2      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	e9c6 4700 	strd	r4, r7, [r6]
 80002ec:	e7df      	b.n	80002ae <__udivmoddi4+0xa2>
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xe6>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f382 	clz	r3, r2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x210>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2101      	movs	r1, #1
 8000308:	fbb2 f5f7 	udiv	r5, r2, r7
 800030c:	fb07 2015 	mls	r0, r7, r5, r2
 8000310:	0c22      	lsrs	r2, r4, #16
 8000312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000316:	fb0e f005 	mul.w	r0, lr, r5
 800031a:	4290      	cmp	r0, r2
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x124>
 800031e:	eb1c 0202 	adds.w	r2, ip, r2
 8000322:	f105 38ff 	add.w	r8, r5, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4290      	cmp	r0, r2
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2b8>
 800032e:	4645      	mov	r5, r8
 8000330:	1a12      	subs	r2, r2, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb2 f0f7 	udiv	r0, r2, r7
 8000338:	fb07 2210 	mls	r2, r7, r0, r2
 800033c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x14e>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x14c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2c2>
 8000358:	4610      	mov	r0, r2
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000362:	e79f      	b.n	80002a4 <__udivmoddi4+0x98>
 8000364:	f1c1 0720 	rsb	r7, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa05 f401 	lsl.w	r4, r5, r1
 8000376:	fa20 f307 	lsr.w	r3, r0, r7
 800037a:	40fd      	lsrs	r5, r7
 800037c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000380:	4323      	orrs	r3, r4
 8000382:	fbb5 f8f9 	udiv	r8, r5, r9
 8000386:	fa1f fe8c 	uxth.w	lr, ip
 800038a:	fb09 5518 	mls	r5, r9, r8, r5
 800038e:	0c1c      	lsrs	r4, r3, #16
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	fb08 f50e 	mul.w	r5, r8, lr
 8000398:	42a5      	cmp	r5, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	fa00 f001 	lsl.w	r0, r0, r1
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2b4>
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2b4>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4464      	add	r4, ip
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	b29d      	uxth	r5, r3
 80003c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c4:	fb09 4413 	mls	r4, r9, r3, r4
 80003c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2ac>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2ac>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	4464      	add	r4, ip
 80003e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ea:	fba3 9502 	umull	r9, r5, r3, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	42ac      	cmp	r4, r5
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46ae      	mov	lr, r5
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x29c>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x298>
 80003fc:	b156      	cbz	r6, 8000414 <__udivmoddi4+0x208>
 80003fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000402:	eb64 040e 	sbc.w	r4, r4, lr
 8000406:	fa04 f707 	lsl.w	r7, r4, r7
 800040a:	40ca      	lsrs	r2, r1
 800040c:	40cc      	lsrs	r4, r1
 800040e:	4317      	orrs	r7, r2
 8000410:	e9c6 7400 	strd	r7, r4, [r6]
 8000414:	4618      	mov	r0, r3
 8000416:	2100      	movs	r1, #0
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	f1c3 0120 	rsb	r1, r3, #32
 8000420:	fa02 fc03 	lsl.w	ip, r2, r3
 8000424:	fa20 f201 	lsr.w	r2, r0, r1
 8000428:	fa25 f101 	lsr.w	r1, r5, r1
 800042c:	409d      	lsls	r5, r3
 800042e:	432a      	orrs	r2, r5
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1510 	mls	r5, r7, r0, r1
 8000440:	0c11      	lsrs	r1, r2, #16
 8000442:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000446:	fb00 f50e 	mul.w	r5, r0, lr
 800044a:	428d      	cmp	r5, r1
 800044c:	fa04 f403 	lsl.w	r4, r4, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x258>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b0>
 800045c:	428d      	cmp	r5, r1
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b0>
 8000460:	3802      	subs	r0, #2
 8000462:	4461      	add	r1, ip
 8000464:	1b49      	subs	r1, r1, r5
 8000466:	b292      	uxth	r2, r2
 8000468:	fbb1 f5f7 	udiv	r5, r1, r7
 800046c:	fb07 1115 	mls	r1, r7, r5, r1
 8000470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000474:	fb05 f10e 	mul.w	r1, r5, lr
 8000478:	4291      	cmp	r1, r2
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x282>
 800047c:	eb1c 0202 	adds.w	r2, ip, r2
 8000480:	f105 38ff 	add.w	r8, r5, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000486:	4291      	cmp	r1, r2
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 800048a:	3d02      	subs	r5, #2
 800048c:	4462      	add	r2, ip
 800048e:	1a52      	subs	r2, r2, r1
 8000490:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0xfc>
 8000496:	4631      	mov	r1, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e708      	b.n	80002ae <__udivmoddi4+0xa2>
 800049c:	4639      	mov	r1, r7
 800049e:	e6e6      	b.n	800026e <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x90>
 80004a4:	4548      	cmp	r0, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b4:	4645      	mov	r5, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x282>
 80004b8:	462b      	mov	r3, r5
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x258>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c4:	3d02      	subs	r5, #2
 80004c6:	4462      	add	r2, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x124>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xd8>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x14e>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Status_Led_Task>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void Status_Led_Task(void *p){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

	while(1) {
	     if (xQueueReceive(myQueue, &led_state, 5) == pdPASS) {
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <Status_Led_Task+0x64>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2205      	movs	r2, #5
 80004e6:	4916      	ldr	r1, [pc, #88]	; (8000540 <Status_Led_Task+0x68>)
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 fd75 	bl	8002fd8 <xQueueReceive>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d11e      	bne.n	8000532 <Status_Led_Task+0x5a>
	    	 if(led_state == 1) {
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <Status_Led_Task+0x68>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d106      	bne.n	800050a <Status_Led_Task+0x32>
	    		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4810      	ldr	r0, [pc, #64]	; (8000544 <Status_Led_Task+0x6c>)
 8000504:	f000 fec2 	bl	800128c <HAL_GPIO_WritePin>
 8000508:	e013      	b.n	8000532 <Status_Led_Task+0x5a>
	    	 }
	    	 else if (led_state == 0) {
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <Status_Led_Task+0x68>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d106      	bne.n	8000520 <Status_Led_Task+0x48>
	    		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <Status_Led_Task+0x6c>)
 800051a:	f000 feb7 	bl	800128c <HAL_GPIO_WritePin>
 800051e:	e008      	b.n	8000532 <Status_Led_Task+0x5a>
	    	 }
	    	 else if (led_state == 2) {
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <Status_Led_Task+0x68>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b02      	cmp	r3, #2
 8000526:	d104      	bne.n	8000532 <Status_Led_Task+0x5a>
	    		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <Status_Led_Task+0x6c>)
 800052e:	f000 fec6 	bl	80012be <HAL_GPIO_TogglePin>
	    	 }
	     }
	      vTaskDelay(100);
 8000532:	2064      	movs	r0, #100	; 0x64
 8000534:	f003 f85e 	bl	80035f4 <vTaskDelay>
	     if (xQueueReceive(myQueue, &led_state, 5) == pdPASS) {
 8000538:	e7d2      	b.n	80004e0 <Status_Led_Task+0x8>
 800053a:	bf00      	nop
 800053c:	20000098 	.word	0x20000098
 8000540:	20000040 	.word	0x20000040
 8000544:	40020c00 	.word	0x40020c00

08000548 <Interface_Task>:
}
}
void Interface_Task(void *p){
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]

	int index = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
	while(1){
        if (HAL_UART_Receive(&huart2, (uint8_t*)&rxBuffer[index], 1, (TickType_t)0) == HAL_OK) {
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4a2b      	ldr	r2, [pc, #172]	; (8000604 <Interface_Task+0xbc>)
 8000558:	1899      	adds	r1, r3, r2
 800055a:	2300      	movs	r3, #0
 800055c:	2201      	movs	r2, #1
 800055e:	482a      	ldr	r0, [pc, #168]	; (8000608 <Interface_Task+0xc0>)
 8000560:	f001 fb70 	bl	8001c44 <HAL_UART_Receive>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d1f4      	bne.n	8000554 <Interface_Task+0xc>

        		if (strncmp(rxBuffer, "ON\\CR\\LF",10) == 0) {
 800056a:	4928      	ldr	r1, [pc, #160]	; (800060c <Interface_Task+0xc4>)
 800056c:	4825      	ldr	r0, [pc, #148]	; (8000604 <Interface_Task+0xbc>)
 800056e:	f7ff fe2b 	bl	80001c8 <strcmp>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d110      	bne.n	800059a <Interface_Task+0x52>
                    uint8_t led_command = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	72fb      	strb	r3, [r7, #11]
                    xQueueSend(myQueue, &led_command, (TickType_t)0);
 800057c:	4b24      	ldr	r3, [pc, #144]	; (8000610 <Interface_Task+0xc8>)
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	f107 010b 	add.w	r1, r7, #11
 8000584:	2300      	movs	r3, #0
 8000586:	2200      	movs	r2, #0
 8000588:	f002 fc7c 	bl	8002e84 <xQueueGenericSend>
	                index = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
	                clearBuff(rxBuffer,15);
 8000590:	210f      	movs	r1, #15
 8000592:	481c      	ldr	r0, [pc, #112]	; (8000604 <Interface_Task+0xbc>)
 8000594:	f000 f86c 	bl	8000670 <clearBuff>
 8000598:	e7dc      	b.n	8000554 <Interface_Task+0xc>
                }
                else if (strncmp(rxBuffer, "OFF\\CR\\LF",11) == 0) {
 800059a:	491e      	ldr	r1, [pc, #120]	; (8000614 <Interface_Task+0xcc>)
 800059c:	4819      	ldr	r0, [pc, #100]	; (8000604 <Interface_Task+0xbc>)
 800059e:	f7ff fe13 	bl	80001c8 <strcmp>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d110      	bne.n	80005ca <Interface_Task+0x82>
                    uint8_t led_command = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	72bb      	strb	r3, [r7, #10]
                    xQueueSend(myQueue, &led_command, (TickType_t)0);
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <Interface_Task+0xc8>)
 80005ae:	6818      	ldr	r0, [r3, #0]
 80005b0:	f107 010a 	add.w	r1, r7, #10
 80005b4:	2300      	movs	r3, #0
 80005b6:	2200      	movs	r2, #0
 80005b8:	f002 fc64 	bl	8002e84 <xQueueGenericSend>
	                index = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
	                clearBuff(rxBuffer,15);
 80005c0:	210f      	movs	r1, #15
 80005c2:	4810      	ldr	r0, [pc, #64]	; (8000604 <Interface_Task+0xbc>)
 80005c4:	f000 f854 	bl	8000670 <clearBuff>
 80005c8:	e7c4      	b.n	8000554 <Interface_Task+0xc>
                }
                else if (strncmp(rxBuffer, "TOGGLE\\CR\\LF",14) == 0) {
 80005ca:	4913      	ldr	r1, [pc, #76]	; (8000618 <Interface_Task+0xd0>)
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <Interface_Task+0xbc>)
 80005ce:	f7ff fdfb 	bl	80001c8 <strcmp>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d110      	bne.n	80005fa <Interface_Task+0xb2>
                    uint8_t led_command = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	727b      	strb	r3, [r7, #9]
                    xQueueSend(myQueue, &led_command, (TickType_t)0);
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <Interface_Task+0xc8>)
 80005de:	6818      	ldr	r0, [r3, #0]
 80005e0:	f107 0109 	add.w	r1, r7, #9
 80005e4:	2300      	movs	r3, #0
 80005e6:	2200      	movs	r2, #0
 80005e8:	f002 fc4c 	bl	8002e84 <xQueueGenericSend>
	                index = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
	                clearBuff(rxBuffer,15);
 80005f0:	210f      	movs	r1, #15
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <Interface_Task+0xbc>)
 80005f4:	f000 f83c 	bl	8000670 <clearBuff>
 80005f8:	e7ac      	b.n	8000554 <Interface_Task+0xc>
                }
                else  index++;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3301      	adds	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
        if (HAL_UART_Receive(&huart2, (uint8_t*)&rxBuffer[index], 1, (TickType_t)0) == HAL_OK) {
 8000600:	e7a8      	b.n	8000554 <Interface_Task+0xc>
 8000602:	bf00      	nop
 8000604:	20000030 	.word	0x20000030
 8000608:	20000044 	.word	0x20000044
 800060c:	08004788 	.word	0x08004788
 8000610:	20000098 	.word	0x20000098
 8000614:	08004794 	.word	0x08004794
 8000618:	080047a0 	.word	0x080047a0

0800061c <Button_Task>:

    }
vTaskDelay(100);
}

void Button_Task(void *p){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	while(1){
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1){
 8000624:	2101      	movs	r1, #1
 8000626:	480f      	ldr	r0, [pc, #60]	; (8000664 <Button_Task+0x48>)
 8000628:	f000 fe18 	bl	800125c <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d114      	bne.n	800065c <Button_Task+0x40>
			  led_state = 2;
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <Button_Task+0x4c>)
 8000634:	2202      	movs	r2, #2
 8000636:	601a      	str	r2, [r3, #0]
			  xQueueSend(myQueue, &led_state,(TickType_t)0);
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <Button_Task+0x50>)
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	2200      	movs	r2, #0
 8000640:	4909      	ldr	r1, [pc, #36]	; (8000668 <Button_Task+0x4c>)
 8000642:	f002 fc1f 	bl	8002e84 <xQueueGenericSend>
			  vTaskDelay(100);;
 8000646:	2064      	movs	r0, #100	; 0x64
 8000648:	f002 ffd4 	bl	80035f4 <vTaskDelay>
			  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1);
 800064c:	bf00      	nop
 800064e:	2101      	movs	r1, #1
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <Button_Task+0x48>)
 8000652:	f000 fe03 	bl	800125c <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d0f8      	beq.n	800064e <Button_Task+0x32>
		  }
		  vTaskDelay(1);
 800065c:	2001      	movs	r0, #1
 800065e:	f002 ffc9 	bl	80035f4 <vTaskDelay>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1){
 8000662:	e7df      	b.n	8000624 <Button_Task+0x8>
 8000664:	40020000 	.word	0x40020000
 8000668:	20000040 	.word	0x20000040
 800066c:	20000098 	.word	0x20000098

08000670 <clearBuff>:
	  }
}
void clearBuff(char* buff, int len){
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < len ; i++){
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e008      	b.n	8000692 <clearBuff+0x22>
		*buff = '\0';
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
		buff++;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3301      	adds	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < len ; i++){
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3301      	adds	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	429a      	cmp	r2, r3
 8000698:	dbf2      	blt.n	8000680 <clearBuff+0x10>
	}
}
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fa23 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f841 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 f8d1 	bl	800085c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ba:	f000 f8a5 	bl	8000808 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  myQueue = xQueueCreate(5, sizeof(char));
 80006be:	2200      	movs	r2, #0
 80006c0:	2101      	movs	r1, #1
 80006c2:	2005      	movs	r0, #5
 80006c4:	f002 fb80 	bl	8002dc8 <xQueueGenericCreate>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a11      	ldr	r2, [pc, #68]	; (8000710 <main+0x68>)
 80006cc:	6013      	str	r3, [r2, #0]
  xTaskCreate(Status_Led_Task, "statusLEDTask",configMINIMAL_STACK_SIZE, NULL, 1, &led_task_Handle);
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <main+0x6c>)
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	2301      	movs	r3, #1
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2300      	movs	r3, #0
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	490f      	ldr	r1, [pc, #60]	; (8000718 <main+0x70>)
 80006dc:	480f      	ldr	r0, [pc, #60]	; (800071c <main+0x74>)
 80006de:	f002 fe6a 	bl	80033b6 <xTaskCreate>
  xTaskCreate(Interface_Task, "uart2Task",configMINIMAL_STACK_SIZE, NULL, 1, &myTask2Handle);
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <main+0x78>)
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	2301      	movs	r3, #1
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2300      	movs	r3, #0
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	490d      	ldr	r1, [pc, #52]	; (8000724 <main+0x7c>)
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <main+0x80>)
 80006f2:	f002 fe60 	bl	80033b6 <xTaskCreate>
  xTaskCreate(Button_Task, "buttonTask",configMINIMAL_STACK_SIZE, NULL, 1, &ButtonHandle);
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <main+0x84>)
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2301      	movs	r3, #1
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2300      	movs	r3, #0
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	490b      	ldr	r1, [pc, #44]	; (8000730 <main+0x88>)
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <main+0x8c>)
 8000706:	f002 fe56 	bl	80033b6 <xTaskCreate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 800070a:	f002 ffe1 	bl	80036d0 <vTaskStartScheduler>
  while (1)
 800070e:	e7fe      	b.n	800070e <main+0x66>
 8000710:	20000098 	.word	0x20000098
 8000714:	2000008c 	.word	0x2000008c
 8000718:	080047b0 	.word	0x080047b0
 800071c:	080004d9 	.word	0x080004d9
 8000720:	20000090 	.word	0x20000090
 8000724:	080047c0 	.word	0x080047c0
 8000728:	08000549 	.word	0x08000549
 800072c:	20000094 	.word	0x20000094
 8000730:	080047cc 	.word	0x080047cc
 8000734:	0800061d 	.word	0x0800061d

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	; 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f003 ffd8 	bl	80046fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <SystemClock_Config+0xc8>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a26      	ldr	r2, [pc, #152]	; (8000800 <SystemClock_Config+0xc8>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <SystemClock_Config+0xc8>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <SystemClock_Config+0xcc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a20      	ldr	r2, [pc, #128]	; (8000804 <SystemClock_Config+0xcc>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <SystemClock_Config+0xcc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007a8:	2319      	movs	r3, #25
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fd99 	bl	80012f4 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c8:	f000 f8a8 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fffc 	bl	80017e4 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007f2:	f000 f893 	bl	800091c <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	; 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_USART2_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000840:	f001 f9b0 	bl	8001ba4 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f000 f867 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000044 	.word	0x20000044
 8000858:	40004400 	.word	0x40004400

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_GPIO_Init+0xb4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a25      	ldr	r2, [pc, #148]	; (8000910 <MX_GPIO_Init+0xb4>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_GPIO_Init+0xb4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_GPIO_Init+0xb4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <MX_GPIO_Init+0xb4>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_GPIO_Init+0xb4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_GPIO_Init+0xb4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a17      	ldr	r2, [pc, #92]	; (8000910 <MX_GPIO_Init+0xb4>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_GPIO_Init+0xb4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_GPIO_Init+0xb8>)
 80008ce:	f000 fcdd 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008d2:	2301      	movs	r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4619      	mov	r1, r3
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_GPIO_Init+0xbc>)
 80008e6:	f000 fb1d 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4619      	mov	r1, r3
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_GPIO_Init+0xb8>)
 8000904:	f000 fb0e 	bl	8000f24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40020c00 	.word	0x40020c00
 8000918:	40020000 	.word	0x40020000

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <HAL_UART_MspInit+0x94>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d133      	bne.n	8000a02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <HAL_UART_MspInit+0x98>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <HAL_UART_MspInit+0x98>)
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_UART_MspInit+0x98>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_UART_MspInit+0x98>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <HAL_UART_MspInit+0x98>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_UART_MspInit+0x98>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009d2:	230c      	movs	r3, #12
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e2:	2307      	movs	r3, #7
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <HAL_UART_MspInit+0x9c>)
 80009ee:	f000 fa99 	bl	8000f24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2026      	movs	r0, #38	; 0x26
 80009f8:	f000 f9cb 	bl	8000d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009fc:	2026      	movs	r0, #38	; 0x26
 80009fe:	f000 f9e4 	bl	8000dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40004400 	.word	0x40004400
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a1c:	e7fe      	b.n	8000a1c <NMI_Handler+0x4>

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a64:	f000 f89a 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <USART2_IRQHandler+0x10>)
 8000a72:	f001 f97f 	bl	8001d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000044 	.word	0x20000044

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000aa8:	f7ff ffea 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	; (8000af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f003 fe1b 	bl	800470c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f7ff fde7 	bl	80006a8 <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ae8:	08004808 	.word	0x08004808
  ldr r2, =_sbss
 8000aec:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000af0:	200045c0 	.word	0x200045c0

08000af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <HAL_Init+0x40>)
 8000b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <HAL_Init+0x40>)
 8000b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_Init+0x40>)
 8000b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f92b 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f000 f808 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fefc 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023c00 	.word	0x40023c00

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x54>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x58>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f943 	bl	8000de6 <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00e      	b.n	8000b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d80a      	bhi.n	8000b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 f90b 	bl	8000d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_InitTick+0x5c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000004 	.word	0x20000004

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	2000009c 	.word	0x2000009c

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2000009c 	.word	0x2000009c

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff29 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff3e 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff8e 	bl	8000cd0 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5d 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff31 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffa2 	bl	8000d38 <SysTick_Config>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b084      	sub	sp, #16
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff feda 	bl	8000bc4 <HAL_GetTick>
 8000e10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d008      	beq.n	8000e30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e052      	b.n	8000ed6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 0216 	bic.w	r2, r2, #22
 8000e3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d103      	bne.n	8000e60 <HAL_DMA_Abort+0x62>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d007      	beq.n	8000e70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0208 	bic.w	r2, r2, #8
 8000e6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e80:	e013      	b.n	8000eaa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e82:	f7ff fe9f 	bl	8000bc4 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d90c      	bls.n	8000eaa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2220      	movs	r2, #32
 8000e94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e015      	b.n	8000ed6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1e4      	bne.n	8000e82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ebc:	223f      	movs	r2, #63	; 0x3f
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d004      	beq.n	8000efc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e00c      	b.n	8000f16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2205      	movs	r2, #5
 8000f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0201 	bic.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
 8000f3e:	e16b      	b.n	8001218 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	f040 815a 	bne.w	8001212 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d005      	beq.n	8000f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d130      	bne.n	8000fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f003 0201 	and.w	r2, r3, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d017      	beq.n	8001014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d123      	bne.n	8001068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	691a      	ldr	r2, [r3, #16]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	69b9      	ldr	r1, [r7, #24]
 8001064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0203 	and.w	r2, r3, #3
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 80b4 	beq.w	8001212 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b60      	ldr	r3, [pc, #384]	; (8001230 <HAL_GPIO_Init+0x30c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a5f      	ldr	r2, [pc, #380]	; (8001230 <HAL_GPIO_Init+0x30c>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b5d      	ldr	r3, [pc, #372]	; (8001230 <HAL_GPIO_Init+0x30c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c6:	4a5b      	ldr	r2, [pc, #364]	; (8001234 <HAL_GPIO_Init+0x310>)
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	3302      	adds	r3, #2
 80010ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a52      	ldr	r2, [pc, #328]	; (8001238 <HAL_GPIO_Init+0x314>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d02b      	beq.n	800114a <HAL_GPIO_Init+0x226>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a51      	ldr	r2, [pc, #324]	; (800123c <HAL_GPIO_Init+0x318>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d025      	beq.n	8001146 <HAL_GPIO_Init+0x222>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a50      	ldr	r2, [pc, #320]	; (8001240 <HAL_GPIO_Init+0x31c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d01f      	beq.n	8001142 <HAL_GPIO_Init+0x21e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4f      	ldr	r2, [pc, #316]	; (8001244 <HAL_GPIO_Init+0x320>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d019      	beq.n	800113e <HAL_GPIO_Init+0x21a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <HAL_GPIO_Init+0x324>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d013      	beq.n	800113a <HAL_GPIO_Init+0x216>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4d      	ldr	r2, [pc, #308]	; (800124c <HAL_GPIO_Init+0x328>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d00d      	beq.n	8001136 <HAL_GPIO_Init+0x212>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4c      	ldr	r2, [pc, #304]	; (8001250 <HAL_GPIO_Init+0x32c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d007      	beq.n	8001132 <HAL_GPIO_Init+0x20e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4b      	ldr	r2, [pc, #300]	; (8001254 <HAL_GPIO_Init+0x330>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_GPIO_Init+0x20a>
 800112a:	2307      	movs	r3, #7
 800112c:	e00e      	b.n	800114c <HAL_GPIO_Init+0x228>
 800112e:	2308      	movs	r3, #8
 8001130:	e00c      	b.n	800114c <HAL_GPIO_Init+0x228>
 8001132:	2306      	movs	r3, #6
 8001134:	e00a      	b.n	800114c <HAL_GPIO_Init+0x228>
 8001136:	2305      	movs	r3, #5
 8001138:	e008      	b.n	800114c <HAL_GPIO_Init+0x228>
 800113a:	2304      	movs	r3, #4
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x228>
 800113e:	2303      	movs	r3, #3
 8001140:	e004      	b.n	800114c <HAL_GPIO_Init+0x228>
 8001142:	2302      	movs	r3, #2
 8001144:	e002      	b.n	800114c <HAL_GPIO_Init+0x228>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_GPIO_Init+0x228>
 800114a:	2300      	movs	r3, #0
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	f002 0203 	and.w	r2, r2, #3
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	4093      	lsls	r3, r2
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800115c:	4935      	ldr	r1, [pc, #212]	; (8001234 <HAL_GPIO_Init+0x310>)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	3302      	adds	r3, #2
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <HAL_GPIO_Init+0x334>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800118e:	4a32      	ldr	r2, [pc, #200]	; (8001258 <HAL_GPIO_Init+0x334>)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_GPIO_Init+0x334>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b8:	4a27      	ldr	r2, [pc, #156]	; (8001258 <HAL_GPIO_Init+0x334>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_GPIO_Init+0x334>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e2:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <HAL_GPIO_Init+0x334>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_GPIO_Init+0x334>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800120c:	4a12      	ldr	r2, [pc, #72]	; (8001258 <HAL_GPIO_Init+0x334>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3301      	adds	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	2b0f      	cmp	r3, #15
 800121c:	f67f ae90 	bls.w	8000f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40013800 	.word	0x40013800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020400 	.word	0x40020400
 8001240:	40020800 	.word	0x40020800
 8001244:	40020c00 	.word	0x40020c00
 8001248:	40021000 	.word	0x40021000
 800124c:	40021400 	.word	0x40021400
 8001250:	40021800 	.word	0x40021800
 8001254:	40021c00 	.word	0x40021c00
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001274:	2301      	movs	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e001      	b.n	800127e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800129c:	787b      	ldrb	r3, [r7, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a8:	e003      	b.n	80012b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	041a      	lsls	r2, r3, #16
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	619a      	str	r2, [r3, #24]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012be:	b480      	push	{r7}
 80012c0:	b085      	sub	sp, #20
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012d0:	887a      	ldrh	r2, [r7, #2]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4013      	ands	r3, r2
 80012d6:	041a      	lsls	r2, r3, #16
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43d9      	mvns	r1, r3
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	400b      	ands	r3, r1
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	619a      	str	r2, [r3, #24]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e267      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d075      	beq.n	80013fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001312:	4b88      	ldr	r3, [pc, #544]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b04      	cmp	r3, #4
 800131c:	d00c      	beq.n	8001338 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131e:	4b85      	ldr	r3, [pc, #532]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001326:	2b08      	cmp	r3, #8
 8001328:	d112      	bne.n	8001350 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132a:	4b82      	ldr	r3, [pc, #520]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001336:	d10b      	bne.n	8001350 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	4b7e      	ldr	r3, [pc, #504]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d05b      	beq.n	80013fc <HAL_RCC_OscConfig+0x108>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d157      	bne.n	80013fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e242      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d106      	bne.n	8001368 <HAL_RCC_OscConfig+0x74>
 800135a:	4b76      	ldr	r3, [pc, #472]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a75      	ldr	r2, [pc, #468]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e01d      	b.n	80013a4 <HAL_RCC_OscConfig+0xb0>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x98>
 8001372:	4b70      	ldr	r3, [pc, #448]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6f      	ldr	r2, [pc, #444]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b6d      	ldr	r3, [pc, #436]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6c      	ldr	r2, [pc, #432]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0xb0>
 800138c:	4b69      	ldr	r3, [pc, #420]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a68      	ldr	r2, [pc, #416]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b66      	ldr	r3, [pc, #408]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a65      	ldr	r2, [pc, #404]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc0a 	bl	8000bc4 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fc06 	bl	8000bc4 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e207      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b5b      	ldr	r3, [pc, #364]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xc0>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fbf6 	bl	8000bc4 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fbf2 	bl	8000bc4 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1f3      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	4b51      	ldr	r3, [pc, #324]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0xe8>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d063      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140a:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800141e:	2b08      	cmp	r3, #8
 8001420:	d11c      	bne.n	800145c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001422:	4b44      	ldr	r3, [pc, #272]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	4b41      	ldr	r3, [pc, #260]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x152>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d001      	beq.n	8001446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e1c7      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001446:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4937      	ldr	r1, [pc, #220]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	e03a      	b.n	80014d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	4b34      	ldr	r3, [pc, #208]	; (8001538 <HAL_RCC_OscConfig+0x244>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff fbab 	bl	8000bc4 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff fba7 	bl	8000bc4 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e1a8      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4925      	ldr	r1, [pc, #148]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_OscConfig+0x244>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb8a 	bl	8000bc4 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff fb86 	bl	8000bc4 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e187      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d036      	beq.n	800154c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d016      	beq.n	8001514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_RCC_OscConfig+0x248>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ec:	f7ff fb6a 	bl	8000bc4 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff fb66 	bl	8000bc4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e167      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RCC_OscConfig+0x240>)
 8001508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x200>
 8001512:	e01b      	b.n	800154c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_RCC_OscConfig+0x248>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fb53 	bl	8000bc4 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	e00e      	b.n	8001540 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001522:	f7ff fb4f 	bl	8000bc4 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d907      	bls.n	8001540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e150      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
 8001534:	40023800 	.word	0x40023800
 8001538:	42470000 	.word	0x42470000
 800153c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001540:	4b88      	ldr	r3, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ea      	bne.n	8001522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 8097 	beq.w	8001688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155e:	4b81      	ldr	r3, [pc, #516]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10f      	bne.n	800158a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	4b7d      	ldr	r3, [pc, #500]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a7c      	ldr	r2, [pc, #496]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b7a      	ldr	r3, [pc, #488]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001586:	2301      	movs	r3, #1
 8001588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158a:	4b77      	ldr	r3, [pc, #476]	; (8001768 <HAL_RCC_OscConfig+0x474>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d118      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001596:	4b74      	ldr	r3, [pc, #464]	; (8001768 <HAL_RCC_OscConfig+0x474>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a73      	ldr	r2, [pc, #460]	; (8001768 <HAL_RCC_OscConfig+0x474>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fb0f 	bl	8000bc4 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015aa:	f7ff fb0b 	bl	8000bc4 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e10c      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <HAL_RCC_OscConfig+0x474>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x2ea>
 80015d0:	4b64      	ldr	r3, [pc, #400]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a63      	ldr	r2, [pc, #396]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	e01c      	b.n	8001618 <HAL_RCC_OscConfig+0x324>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b05      	cmp	r3, #5
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x30c>
 80015e6:	4b5f      	ldr	r3, [pc, #380]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ea:	4a5e      	ldr	r2, [pc, #376]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6713      	str	r3, [r2, #112]	; 0x70
 80015f2:	4b5c      	ldr	r3, [pc, #368]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	4a5b      	ldr	r2, [pc, #364]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6713      	str	r3, [r2, #112]	; 0x70
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0x324>
 8001600:	4b58      	ldr	r3, [pc, #352]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001604:	4a57      	ldr	r2, [pc, #348]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	6713      	str	r3, [r2, #112]	; 0x70
 800160c:	4b55      	ldr	r3, [pc, #340]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	4a54      	ldr	r2, [pc, #336]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d015      	beq.n	800164c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fad0 	bl	8000bc4 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff facc 	bl	8000bc4 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e0cb      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163e:	4b49      	ldr	r3, [pc, #292]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0ee      	beq.n	8001628 <HAL_RCC_OscConfig+0x334>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff faba 	bl	8000bc4 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7ff fab6 	bl	8000bc4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e0b5      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166a:	4b3e      	ldr	r3, [pc, #248]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1ee      	bne.n	8001654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167c:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	4a38      	ldr	r2, [pc, #224]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001686:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a1 	beq.w	80017d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001692:	4b34      	ldr	r3, [pc, #208]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b08      	cmp	r3, #8
 800169c:	d05c      	beq.n	8001758 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d141      	bne.n	800172a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_RCC_OscConfig+0x478>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fa8a 	bl	8000bc4 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fa86 	bl	8000bc4 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e087      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	4b27      	ldr	r3, [pc, #156]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	019b      	lsls	r3, r3, #6
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	085b      	lsrs	r3, r3, #1
 80016ea:	3b01      	subs	r3, #1
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	061b      	lsls	r3, r3, #24
 80016f6:	491b      	ldr	r1, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x478>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fa5f 	bl	8000bc4 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff fa5b 	bl	8000bc4 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e05c      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x416>
 8001728:	e054      	b.n	80017d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_RCC_OscConfig+0x478>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fa48 	bl	8000bc4 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff fa44 	bl	8000bc4 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e045      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_RCC_OscConfig+0x470>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x444>
 8001756:	e03d      	b.n	80017d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d107      	bne.n	8001770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e038      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
 8001764:	40023800 	.word	0x40023800
 8001768:	40007000 	.word	0x40007000
 800176c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_RCC_OscConfig+0x4ec>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d028      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d121      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d11a      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017a0:	4013      	ands	r3, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d111      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	3b01      	subs	r3, #1
 80017ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0cc      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f8:	4b68      	ldr	r3, [pc, #416]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d90c      	bls.n	8001820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b65      	ldr	r3, [pc, #404]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b63      	ldr	r3, [pc, #396]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0b8      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001838:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4a58      	ldr	r2, [pc, #352]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001842:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800185a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800185c:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	494d      	ldr	r1, [pc, #308]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d044      	beq.n	8001904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d119      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e07f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d003      	beq.n	80018a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a2:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e06f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e067      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f023 0203 	bic.w	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4934      	ldr	r1, [pc, #208]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d4:	f7ff f976 	bl	8000bc4 <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018dc:	f7ff f972 	bl	8000bc4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e04f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 020c 	and.w	r2, r3, #12
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	429a      	cmp	r2, r3
 8001902:	d1eb      	bne.n	80018dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d20c      	bcs.n	800192c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e032      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4916      	ldr	r1, [pc, #88]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d009      	beq.n	800196a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	490e      	ldr	r1, [pc, #56]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800196a:	f000 f821 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 800196e:	4602      	mov	r2, r0
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	490a      	ldr	r1, [pc, #40]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	5ccb      	ldrb	r3, [r1, r3]
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f8d6 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023c00 	.word	0x40023c00
 80019a0:	40023800 	.word	0x40023800
 80019a4:	080047e0 	.word	0x080047e0
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b4:	b090      	sub	sp, #64	; 0x40
 80019b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
 80019bc:	2300      	movs	r3, #0
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019c0:	2300      	movs	r3, #0
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c8:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d00d      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x40>
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	f200 80a1 	bhi.w	8001b1c <HAL_RCC_GetSysClockFreq+0x16c>
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x34>
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d003      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0x3a>
 80019e2:	e09b      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x184>)
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80019e8:	e09b      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ea:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x188>)
 80019ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019ee:	e098      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f0:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x180>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019fa:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x180>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d028      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a06:	4b4a      	ldr	r3, [pc, #296]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	623b      	str	r3, [r7, #32]
 8001a10:	627a      	str	r2, [r7, #36]	; 0x24
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a1c:	fb03 f201 	mul.w	r2, r3, r1
 8001a20:	2300      	movs	r3, #0
 8001a22:	fb00 f303 	mul.w	r3, r0, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	4a43      	ldr	r2, [pc, #268]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a2a:	fba0 1202 	umull	r1, r2, r0, r2
 8001a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a30:	460a      	mov	r2, r1
 8001a32:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a36:	4413      	add	r3, r2
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	61fa      	str	r2, [r7, #28]
 8001a42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a4a:	f7fe fbc7 	bl	80001dc <__aeabi_uldivmod>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4613      	mov	r3, r2
 8001a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a56:	e053      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a58:	4b35      	ldr	r3, [pc, #212]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	2200      	movs	r2, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	617a      	str	r2, [r7, #20]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a6a:	f04f 0b00 	mov.w	fp, #0
 8001a6e:	4652      	mov	r2, sl
 8001a70:	465b      	mov	r3, fp
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	0159      	lsls	r1, r3, #5
 8001a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a80:	0150      	lsls	r0, r2, #5
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	ebb2 080a 	subs.w	r8, r2, sl
 8001a8a:	eb63 090b 	sbc.w	r9, r3, fp
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001aa2:	ebb2 0408 	subs.w	r4, r2, r8
 8001aa6:	eb63 0509 	sbc.w	r5, r3, r9
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	00eb      	lsls	r3, r5, #3
 8001ab4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab8:	00e2      	lsls	r2, r4, #3
 8001aba:	4614      	mov	r4, r2
 8001abc:	461d      	mov	r5, r3
 8001abe:	eb14 030a 	adds.w	r3, r4, sl
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	eb45 030b 	adc.w	r3, r5, fp
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	028b      	lsls	r3, r1, #10
 8001ada:	4621      	mov	r1, r4
 8001adc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	028a      	lsls	r2, r1, #10
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aea:	2200      	movs	r2, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	60fa      	str	r2, [r7, #12]
 8001af0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001af4:	f7fe fb72 	bl	80001dc <__aeabi_uldivmod>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4613      	mov	r3, r2
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b1a:	e002      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3740      	adds	r7, #64	; 0x40
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	00f42400 	.word	0x00f42400
 8001b38:	017d7840 	.word	0x017d7840

08001b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000000 	.word	0x20000000

08001b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b58:	f7ff fff0 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0a9b      	lsrs	r3, r3, #10
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4903      	ldr	r1, [pc, #12]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	080047f0 	.word	0x080047f0

08001b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b80:	f7ff ffdc 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	0b5b      	lsrs	r3, r3, #13
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	4903      	ldr	r1, [pc, #12]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b92:	5ccb      	ldrb	r3, [r1, r3]
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	080047f0 	.word	0x080047f0

08001ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e042      	b.n	8001c3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe fed4 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2224      	movs	r2, #36	; 0x24
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fd75 	bl	80026d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	4613      	mov	r3, r2
 8001c52:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	f040 8081 	bne.w	8001d68 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <HAL_UART_Receive+0x2e>
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e079      	b.n	8001d6a <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2222      	movs	r2, #34	; 0x22
 8001c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c8a:	f7fe ff9b 	bl	8000bc4 <HAL_GetTick>
 8001c8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	88fa      	ldrh	r2, [r7, #6]
 8001c94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	88fa      	ldrh	r2, [r7, #6]
 8001c9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca4:	d108      	bne.n	8001cb8 <HAL_UART_Receive+0x74>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d104      	bne.n	8001cb8 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	e003      	b.n	8001cc0 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001cc0:	e047      	b.n	8001d52 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2120      	movs	r1, #32
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 fb0d 	bl	80022ec <UART_WaitOnFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e042      	b.n	8001d6a <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	e01f      	b.n	8001d44 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d0c:	d007      	beq.n	8001d1e <HAL_UART_Receive+0xda>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10a      	bne.n	8001d2c <HAL_UART_Receive+0xe8>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e008      	b.n	8001d3e <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3301      	adds	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1b2      	bne.n	8001cc2 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e000      	b.n	8001d6a <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
  }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b0ba      	sub	sp, #232	; 0xe8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10f      	bne.n	8001dda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_UART_IRQHandler+0x66>
 8001dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fbc2 	bl	800255c <UART_Receive_IT>
      return;
 8001dd8:	e25b      	b.n	8002292 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80de 	beq.w	8001fa0 <HAL_UART_IRQHandler+0x22c>
 8001de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d106      	bne.n	8001dfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001df4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80d1 	beq.w	8001fa0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_UART_IRQHandler+0xae>
 8001e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f043 0201 	orr.w	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_UART_IRQHandler+0xd2>
 8001e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f043 0202 	orr.w	r2, r3, #2
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00b      	beq.n	8001e6a <HAL_UART_IRQHandler+0xf6>
 8001e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f043 0204 	orr.w	r2, r3, #4
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d011      	beq.n	8001e9a <HAL_UART_IRQHandler+0x126>
 8001e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d105      	bne.n	8001e8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f043 0208 	orr.w	r2, r3, #8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 81f2 	beq.w	8002288 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_UART_IRQHandler+0x14e>
 8001eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fb4d 	bl	800255c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ecc:	2b40      	cmp	r3, #64	; 0x40
 8001ece:	bf0c      	ite	eq
 8001ed0:	2301      	moveq	r3, #1
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d103      	bne.n	8001eee <HAL_UART_IRQHandler+0x17a>
 8001ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d04f      	beq.n	8001f8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fa55 	bl	800239e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	d141      	bne.n	8001f86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3314      	adds	r3, #20
 8001f08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f10:	e853 3f00 	ldrex	r3, [r3]
 8001f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3314      	adds	r3, #20
 8001f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f3e:	e841 2300 	strex	r3, r2, [r1]
 8001f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1d9      	bne.n	8001f02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d013      	beq.n	8001f7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	4a7e      	ldr	r2, [pc, #504]	; (8002154 <HAL_UART_IRQHandler+0x3e0>)
 8001f5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe ffbb 	bl	8000ede <HAL_DMA_Abort_IT>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d016      	beq.n	8001f9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f7c:	e00e      	b.n	8001f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f99e 	bl	80022c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f84:	e00a      	b.n	8001f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f99a 	bl	80022c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f8c:	e006      	b.n	8001f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f996 	bl	80022c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001f9a:	e175      	b.n	8002288 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f9c:	bf00      	nop
    return;
 8001f9e:	e173      	b.n	8002288 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	f040 814f 	bne.w	8002248 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8148 	beq.w	8002248 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 8141 	beq.w	8002248 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe6:	2b40      	cmp	r3, #64	; 0x40
 8001fe8:	f040 80b6 	bne.w	8002158 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001ff8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8145 	beq.w	800228c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800200a:	429a      	cmp	r2, r3
 800200c:	f080 813e 	bcs.w	800228c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002016:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002022:	f000 8088 	beq.w	8002136 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	330c      	adds	r3, #12
 800202c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002030:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002034:	e853 3f00 	ldrex	r3, [r3]
 8002038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800203c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	330c      	adds	r3, #12
 800204e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002052:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800205a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800205e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002062:	e841 2300 	strex	r3, r2, [r1]
 8002066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800206a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1d9      	bne.n	8002026 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3314      	adds	r3, #20
 8002078:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800207a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800207c:	e853 3f00 	ldrex	r3, [r3]
 8002080:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3314      	adds	r3, #20
 8002092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002096:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800209a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800209e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80020a2:	e841 2300 	strex	r3, r2, [r1]
 80020a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80020a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1e1      	bne.n	8002072 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3314      	adds	r3, #20
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b8:	e853 3f00 	ldrex	r3, [r3]
 80020bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80020be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3314      	adds	r3, #20
 80020ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80020d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80020d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020da:	e841 2300 	strex	r3, r2, [r1]
 80020de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80020e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1e3      	bne.n	80020ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	330c      	adds	r3, #12
 80020fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020fe:	e853 3f00 	ldrex	r3, [r3]
 8002102:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002106:	f023 0310 	bic.w	r3, r3, #16
 800210a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	330c      	adds	r3, #12
 8002114:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002118:	65ba      	str	r2, [r7, #88]	; 0x58
 800211a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800211c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800211e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002120:	e841 2300 	strex	r3, r2, [r1]
 8002124:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1e3      	bne.n	80020f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fe64 	bl	8000dfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2202      	movs	r2, #2
 800213a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002144:	b29b      	uxth	r3, r3
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	b29b      	uxth	r3, r3
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f8c1 	bl	80022d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002152:	e09b      	b.n	800228c <HAL_UART_IRQHandler+0x518>
 8002154:	08002465 	.word	0x08002465
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002160:	b29b      	uxth	r3, r3
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 808e 	beq.w	8002290 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8089 	beq.w	8002290 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	330c      	adds	r3, #12
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002188:	e853 3f00 	ldrex	r3, [r3]
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002194:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	330c      	adds	r3, #12
 800219e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80021a2:	647a      	str	r2, [r7, #68]	; 0x44
 80021a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021aa:	e841 2300 	strex	r3, r2, [r1]
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80021b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1e3      	bne.n	800217e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3314      	adds	r3, #20
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	e853 3f00 	ldrex	r3, [r3]
 80021c4:	623b      	str	r3, [r7, #32]
   return(result);
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3314      	adds	r3, #20
 80021d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80021da:	633a      	str	r2, [r7, #48]	; 0x30
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021e2:	e841 2300 	strex	r3, r2, [r1]
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1e3      	bne.n	80021b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	330c      	adds	r3, #12
 8002202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	e853 3f00 	ldrex	r3, [r3]
 800220a:	60fb      	str	r3, [r7, #12]
   return(result);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0310 	bic.w	r3, r3, #16
 8002212:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	330c      	adds	r3, #12
 800221c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002220:	61fa      	str	r2, [r7, #28]
 8002222:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002224:	69b9      	ldr	r1, [r7, #24]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	e841 2300 	strex	r3, r2, [r1]
 800222c:	617b      	str	r3, [r7, #20]
   return(result);
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1e3      	bne.n	80021fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800223a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800223e:	4619      	mov	r1, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f847 	bl	80022d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002246:	e023      	b.n	8002290 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800224c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002250:	2b00      	cmp	r3, #0
 8002252:	d009      	beq.n	8002268 <HAL_UART_IRQHandler+0x4f4>
 8002254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f913 	bl	800248c <UART_Transmit_IT>
    return;
 8002266:	e014      	b.n	8002292 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800226c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00e      	beq.n	8002292 <HAL_UART_IRQHandler+0x51e>
 8002274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f953 	bl	800252c <UART_EndTransmit_IT>
    return;
 8002286:	e004      	b.n	8002292 <HAL_UART_IRQHandler+0x51e>
    return;
 8002288:	bf00      	nop
 800228a:	e002      	b.n	8002292 <HAL_UART_IRQHandler+0x51e>
      return;
 800228c:	bf00      	nop
 800228e:	e000      	b.n	8002292 <HAL_UART_IRQHandler+0x51e>
      return;
 8002290:	bf00      	nop
  }
}
 8002292:	37e8      	adds	r7, #232	; 0xe8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022fc:	e03b      	b.n	8002376 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d037      	beq.n	8002376 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002306:	f7fe fc5d 	bl	8000bc4 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	6a3a      	ldr	r2, [r7, #32]
 8002312:	429a      	cmp	r2, r3
 8002314:	d302      	bcc.n	800231c <UART_WaitOnFlagUntilTimeout+0x30>
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e03a      	b.n	8002396 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d023      	beq.n	8002376 <UART_WaitOnFlagUntilTimeout+0x8a>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d020      	beq.n	8002376 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b40      	cmp	r3, #64	; 0x40
 8002338:	d01d      	beq.n	8002376 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b08      	cmp	r3, #8
 8002346:	d116      	bne.n	8002376 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f81d 	bl	800239e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2208      	movs	r2, #8
 8002368:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e00f      	b.n	8002396 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4013      	ands	r3, r2
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	429a      	cmp	r2, r3
 8002384:	bf0c      	ite	eq
 8002386:	2301      	moveq	r3, #1
 8002388:	2300      	movne	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	429a      	cmp	r2, r3
 8002392:	d0b4      	beq.n	80022fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800239e:	b480      	push	{r7}
 80023a0:	b095      	sub	sp, #84	; 0x54
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	330c      	adds	r3, #12
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b0:	e853 3f00 	ldrex	r3, [r3]
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	330c      	adds	r3, #12
 80023c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023c6:	643a      	str	r2, [r7, #64]	; 0x40
 80023c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80023cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023ce:	e841 2300 	strex	r3, r2, [r1]
 80023d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1e5      	bne.n	80023a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3314      	adds	r3, #20
 80023e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	e853 3f00 	ldrex	r3, [r3]
 80023e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3314      	adds	r3, #20
 80023f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002402:	e841 2300 	strex	r3, r2, [r1]
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1e5      	bne.n	80023da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	2b01      	cmp	r3, #1
 8002414:	d119      	bne.n	800244a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	330c      	adds	r3, #12
 800241c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	e853 3f00 	ldrex	r3, [r3]
 8002424:	60bb      	str	r3, [r7, #8]
   return(result);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f023 0310 	bic.w	r3, r3, #16
 800242c:	647b      	str	r3, [r7, #68]	; 0x44
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	330c      	adds	r3, #12
 8002434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002436:	61ba      	str	r2, [r7, #24]
 8002438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243a:	6979      	ldr	r1, [r7, #20]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	e841 2300 	strex	r3, r2, [r1]
 8002442:	613b      	str	r3, [r7, #16]
   return(result);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1e5      	bne.n	8002416 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002458:	bf00      	nop
 800245a:	3754      	adds	r7, #84	; 0x54
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7ff ff1e 	bl	80022c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b21      	cmp	r3, #33	; 0x21
 800249e:	d13e      	bne.n	800251e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a8:	d114      	bne.n	80024d4 <UART_Transmit_IT+0x48>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d110      	bne.n	80024d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	1c9a      	adds	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	621a      	str	r2, [r3, #32]
 80024d2:	e008      	b.n	80024e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	1c59      	adds	r1, r3, #1
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6211      	str	r1, [r2, #32]
 80024de:	781a      	ldrb	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	4619      	mov	r1, r3
 80024f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10f      	bne.n	800251a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002508:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002518:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e000      	b.n	8002520 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800251e:	2302      	movs	r3, #2
  }
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002542:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff fea3 	bl	8002298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08c      	sub	sp, #48	; 0x30
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b22      	cmp	r3, #34	; 0x22
 800256e:	f040 80ae 	bne.w	80026ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257a:	d117      	bne.n	80025ac <UART_Receive_IT+0x50>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d113      	bne.n	80025ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002584:	2300      	movs	r3, #0
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	b29b      	uxth	r3, r3
 8002596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259a:	b29a      	uxth	r2, r3
 800259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	1c9a      	adds	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	629a      	str	r2, [r3, #40]	; 0x28
 80025aa:	e026      	b.n	80025fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025be:	d007      	beq.n	80025d0 <UART_Receive_IT+0x74>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <UART_Receive_IT+0x82>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e008      	b.n	80025f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29b      	uxth	r3, r3
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4619      	mov	r1, r3
 8002608:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800260a:	2b00      	cmp	r3, #0
 800260c:	d15d      	bne.n	80026ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0220 	bic.w	r2, r2, #32
 800261c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800262c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	2b01      	cmp	r3, #1
 8002652:	d135      	bne.n	80026c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	330c      	adds	r3, #12
 8002660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	e853 3f00 	ldrex	r3, [r3]
 8002668:	613b      	str	r3, [r7, #16]
   return(result);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f023 0310 	bic.w	r3, r3, #16
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	330c      	adds	r3, #12
 8002678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267a:	623a      	str	r2, [r7, #32]
 800267c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267e:	69f9      	ldr	r1, [r7, #28]
 8002680:	6a3a      	ldr	r2, [r7, #32]
 8002682:	e841 2300 	strex	r3, r2, [r1]
 8002686:	61bb      	str	r3, [r7, #24]
   return(result);
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e5      	bne.n	800265a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b10      	cmp	r3, #16
 800269a:	d10a      	bne.n	80026b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026b6:	4619      	mov	r1, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff fe0b 	bl	80022d4 <HAL_UARTEx_RxEventCallback>
 80026be:	e002      	b.n	80026c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fdf3 	bl	80022ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e002      	b.n	80026d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
  }
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3730      	adds	r7, #48	; 0x30
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026dc:	b0c0      	sub	sp, #256	; 0x100
 80026de:	af00      	add	r7, sp, #0
 80026e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f4:	68d9      	ldr	r1, [r3, #12]
 80026f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	ea40 0301 	orr.w	r3, r0, r1
 8002700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	431a      	orrs	r2, r3
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	431a      	orrs	r2, r3
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002730:	f021 010c 	bic.w	r1, r1, #12
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800273e:	430b      	orrs	r3, r1
 8002740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800274e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002752:	6999      	ldr	r1, [r3, #24]
 8002754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	ea40 0301 	orr.w	r3, r0, r1
 800275e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4b8f      	ldr	r3, [pc, #572]	; (80029a4 <UART_SetConfig+0x2cc>)
 8002768:	429a      	cmp	r2, r3
 800276a:	d005      	beq.n	8002778 <UART_SetConfig+0xa0>
 800276c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4b8d      	ldr	r3, [pc, #564]	; (80029a8 <UART_SetConfig+0x2d0>)
 8002774:	429a      	cmp	r2, r3
 8002776:	d104      	bne.n	8002782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002778:	f7ff fa00 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 800277c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002780:	e003      	b.n	800278a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002782:	f7ff f9e7 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 8002786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800278a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002794:	f040 810c 	bne.w	80029b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800279c:	2200      	movs	r2, #0
 800279e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80027a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027aa:	4622      	mov	r2, r4
 80027ac:	462b      	mov	r3, r5
 80027ae:	1891      	adds	r1, r2, r2
 80027b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80027b2:	415b      	adcs	r3, r3
 80027b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027ba:	4621      	mov	r1, r4
 80027bc:	eb12 0801 	adds.w	r8, r2, r1
 80027c0:	4629      	mov	r1, r5
 80027c2:	eb43 0901 	adc.w	r9, r3, r1
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027da:	4690      	mov	r8, r2
 80027dc:	4699      	mov	r9, r3
 80027de:	4623      	mov	r3, r4
 80027e0:	eb18 0303 	adds.w	r3, r8, r3
 80027e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027e8:	462b      	mov	r3, r5
 80027ea:	eb49 0303 	adc.w	r3, r9, r3
 80027ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002806:	460b      	mov	r3, r1
 8002808:	18db      	adds	r3, r3, r3
 800280a:	653b      	str	r3, [r7, #80]	; 0x50
 800280c:	4613      	mov	r3, r2
 800280e:	eb42 0303 	adc.w	r3, r2, r3
 8002812:	657b      	str	r3, [r7, #84]	; 0x54
 8002814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800281c:	f7fd fcde 	bl	80001dc <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4b61      	ldr	r3, [pc, #388]	; (80029ac <UART_SetConfig+0x2d4>)
 8002826:	fba3 2302 	umull	r2, r3, r3, r2
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	011c      	lsls	r4, r3, #4
 800282e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002832:	2200      	movs	r2, #0
 8002834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800283c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002840:	4642      	mov	r2, r8
 8002842:	464b      	mov	r3, r9
 8002844:	1891      	adds	r1, r2, r2
 8002846:	64b9      	str	r1, [r7, #72]	; 0x48
 8002848:	415b      	adcs	r3, r3
 800284a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800284c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002850:	4641      	mov	r1, r8
 8002852:	eb12 0a01 	adds.w	sl, r2, r1
 8002856:	4649      	mov	r1, r9
 8002858:	eb43 0b01 	adc.w	fp, r3, r1
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800286c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002870:	4692      	mov	sl, r2
 8002872:	469b      	mov	fp, r3
 8002874:	4643      	mov	r3, r8
 8002876:	eb1a 0303 	adds.w	r3, sl, r3
 800287a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800287e:	464b      	mov	r3, r9
 8002880:	eb4b 0303 	adc.w	r3, fp, r3
 8002884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800289c:	460b      	mov	r3, r1
 800289e:	18db      	adds	r3, r3, r3
 80028a0:	643b      	str	r3, [r7, #64]	; 0x40
 80028a2:	4613      	mov	r3, r2
 80028a4:	eb42 0303 	adc.w	r3, r2, r3
 80028a8:	647b      	str	r3, [r7, #68]	; 0x44
 80028aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028b2:	f7fd fc93 	bl	80001dc <__aeabi_uldivmod>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4611      	mov	r1, r2
 80028bc:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <UART_SetConfig+0x2d4>)
 80028be:	fba3 2301 	umull	r2, r3, r3, r1
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2264      	movs	r2, #100	; 0x64
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	1acb      	subs	r3, r1, r3
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028d2:	4b36      	ldr	r3, [pc, #216]	; (80029ac <UART_SetConfig+0x2d4>)
 80028d4:	fba3 2302 	umull	r2, r3, r3, r2
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028e0:	441c      	add	r4, r3
 80028e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028f4:	4642      	mov	r2, r8
 80028f6:	464b      	mov	r3, r9
 80028f8:	1891      	adds	r1, r2, r2
 80028fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80028fc:	415b      	adcs	r3, r3
 80028fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002904:	4641      	mov	r1, r8
 8002906:	1851      	adds	r1, r2, r1
 8002908:	6339      	str	r1, [r7, #48]	; 0x30
 800290a:	4649      	mov	r1, r9
 800290c:	414b      	adcs	r3, r1
 800290e:	637b      	str	r3, [r7, #52]	; 0x34
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800291c:	4659      	mov	r1, fp
 800291e:	00cb      	lsls	r3, r1, #3
 8002920:	4651      	mov	r1, sl
 8002922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002926:	4651      	mov	r1, sl
 8002928:	00ca      	lsls	r2, r1, #3
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	4603      	mov	r3, r0
 8002930:	4642      	mov	r2, r8
 8002932:	189b      	adds	r3, r3, r2
 8002934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002938:	464b      	mov	r3, r9
 800293a:	460a      	mov	r2, r1
 800293c:	eb42 0303 	adc.w	r3, r2, r3
 8002940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002958:	460b      	mov	r3, r1
 800295a:	18db      	adds	r3, r3, r3
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
 800295e:	4613      	mov	r3, r2
 8002960:	eb42 0303 	adc.w	r3, r2, r3
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800296a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800296e:	f7fd fc35 	bl	80001dc <__aeabi_uldivmod>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <UART_SetConfig+0x2d4>)
 8002978:	fba3 1302 	umull	r1, r3, r3, r2
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	2164      	movs	r1, #100	; 0x64
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	3332      	adds	r3, #50	; 0x32
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <UART_SetConfig+0x2d4>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	f003 0207 	and.w	r2, r3, #7
 8002996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4422      	add	r2, r4
 800299e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029a0:	e106      	b.n	8002bb0 <UART_SetConfig+0x4d8>
 80029a2:	bf00      	nop
 80029a4:	40011000 	.word	0x40011000
 80029a8:	40011400 	.word	0x40011400
 80029ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029b4:	2200      	movs	r2, #0
 80029b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029c2:	4642      	mov	r2, r8
 80029c4:	464b      	mov	r3, r9
 80029c6:	1891      	adds	r1, r2, r2
 80029c8:	6239      	str	r1, [r7, #32]
 80029ca:	415b      	adcs	r3, r3
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
 80029ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029d2:	4641      	mov	r1, r8
 80029d4:	1854      	adds	r4, r2, r1
 80029d6:	4649      	mov	r1, r9
 80029d8:	eb43 0501 	adc.w	r5, r3, r1
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	00eb      	lsls	r3, r5, #3
 80029e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ea:	00e2      	lsls	r2, r4, #3
 80029ec:	4614      	mov	r4, r2
 80029ee:	461d      	mov	r5, r3
 80029f0:	4643      	mov	r3, r8
 80029f2:	18e3      	adds	r3, r4, r3
 80029f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029f8:	464b      	mov	r3, r9
 80029fa:	eb45 0303 	adc.w	r3, r5, r3
 80029fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a1e:	4629      	mov	r1, r5
 8002a20:	008b      	lsls	r3, r1, #2
 8002a22:	4621      	mov	r1, r4
 8002a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a28:	4621      	mov	r1, r4
 8002a2a:	008a      	lsls	r2, r1, #2
 8002a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a30:	f7fd fbd4 	bl	80001dc <__aeabi_uldivmod>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4b60      	ldr	r3, [pc, #384]	; (8002bbc <UART_SetConfig+0x4e4>)
 8002a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	011c      	lsls	r4, r3, #4
 8002a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a46:	2200      	movs	r2, #0
 8002a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a54:	4642      	mov	r2, r8
 8002a56:	464b      	mov	r3, r9
 8002a58:	1891      	adds	r1, r2, r2
 8002a5a:	61b9      	str	r1, [r7, #24]
 8002a5c:	415b      	adcs	r3, r3
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a64:	4641      	mov	r1, r8
 8002a66:	1851      	adds	r1, r2, r1
 8002a68:	6139      	str	r1, [r7, #16]
 8002a6a:	4649      	mov	r1, r9
 8002a6c:	414b      	adcs	r3, r1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a7c:	4659      	mov	r1, fp
 8002a7e:	00cb      	lsls	r3, r1, #3
 8002a80:	4651      	mov	r1, sl
 8002a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a86:	4651      	mov	r1, sl
 8002a88:	00ca      	lsls	r2, r1, #3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4642      	mov	r2, r8
 8002a92:	189b      	adds	r3, r3, r2
 8002a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a98:	464b      	mov	r3, r9
 8002a9a:	460a      	mov	r2, r1
 8002a9c:	eb42 0303 	adc.w	r3, r2, r3
 8002aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8002aae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002abc:	4649      	mov	r1, r9
 8002abe:	008b      	lsls	r3, r1, #2
 8002ac0:	4641      	mov	r1, r8
 8002ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	008a      	lsls	r2, r1, #2
 8002aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ace:	f7fd fb85 	bl	80001dc <__aeabi_uldivmod>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <UART_SetConfig+0x4e4>)
 8002ada:	fba3 2301 	umull	r2, r3, r3, r1
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2264      	movs	r2, #100	; 0x64
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	1acb      	subs	r3, r1, r3
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	3332      	adds	r3, #50	; 0x32
 8002aec:	4a33      	ldr	r2, [pc, #204]	; (8002bbc <UART_SetConfig+0x4e4>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af8:	441c      	add	r4, r3
 8002afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002afe:	2200      	movs	r2, #0
 8002b00:	673b      	str	r3, [r7, #112]	; 0x70
 8002b02:	677a      	str	r2, [r7, #116]	; 0x74
 8002b04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b08:	4642      	mov	r2, r8
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	1891      	adds	r1, r2, r2
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	415b      	adcs	r3, r3
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b18:	4641      	mov	r1, r8
 8002b1a:	1851      	adds	r1, r2, r1
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	4649      	mov	r1, r9
 8002b20:	414b      	adcs	r3, r1
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b30:	4659      	mov	r1, fp
 8002b32:	00cb      	lsls	r3, r1, #3
 8002b34:	4651      	mov	r1, sl
 8002b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b3a:	4651      	mov	r1, sl
 8002b3c:	00ca      	lsls	r2, r1, #3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	4642      	mov	r2, r8
 8002b46:	189b      	adds	r3, r3, r2
 8002b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b4a:	464b      	mov	r3, r9
 8002b4c:	460a      	mov	r2, r1
 8002b4e:	eb42 0303 	adc.w	r3, r2, r3
 8002b52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8002b5e:	667a      	str	r2, [r7, #100]	; 0x64
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	008b      	lsls	r3, r1, #2
 8002b70:	4641      	mov	r1, r8
 8002b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b76:	4641      	mov	r1, r8
 8002b78:	008a      	lsls	r2, r1, #2
 8002b7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b7e:	f7fd fb2d 	bl	80001dc <__aeabi_uldivmod>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <UART_SetConfig+0x4e4>)
 8002b88:	fba3 1302 	umull	r1, r3, r3, r2
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	2164      	movs	r1, #100	; 0x64
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	3332      	adds	r3, #50	; 0x32
 8002b9a:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <UART_SetConfig+0x4e4>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	f003 020f 	and.w	r2, r3, #15
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4422      	add	r2, r4
 8002bae:	609a      	str	r2, [r3, #8]
}
 8002bb0:	bf00      	nop
 8002bb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bbc:	51eb851f 	.word	0x51eb851f

08002bc0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f103 0208 	add.w	r2, r3, #8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f103 0208 	add.w	r2, r3, #8
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f103 0208 	add.w	r2, r3, #8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d103      	bne.n	8002c3a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	e00c      	b.n	8002c54 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e002      	b.n	8002c48 <vListInsert+0x2e>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d2f6      	bcs.n	8002c42 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );



    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6892      	ldr	r2, [r2, #8]
 8002ca2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6852      	ldr	r2, [r2, #4]
 8002cac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d103      	bne.n	8002cc0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	1e5a      	subs	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002cea:	2301      	movs	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d05d      	beq.n	8002db4 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d059      	beq.n	8002db4 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	2100      	movs	r1, #0
 8002d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d000      	beq.n	8002d14 <xQueueGenericReset+0x34>
 8002d12:	2101      	movs	r1, #1
 8002d14:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d14c      	bne.n	8002db4 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 8002d1a:	f001 faf5 	bl	8004308 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	441a      	add	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2200      	movs	r2, #0
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	441a      	add	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	22ff      	movs	r2, #255	; 0xff
 8002d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d114      	bne.n	8002d9a <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01a      	beq.n	8002dae <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	3310      	adds	r3, #16
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 ff3d 	bl	8003bfc <xTaskRemoveFromEventList>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d012      	beq.n	8002dae <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <xQueueGenericReset+0xe4>)
 8002d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	e009      	b.n	8002dae <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	3310      	adds	r3, #16
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff0e 	bl	8002bc0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	3324      	adds	r3, #36	; 0x24
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff09 	bl	8002bc0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002dae:	f001 fac5 	bl	800433c <vPortExitCritical>
 8002db2:	e001      	b.n	8002db8 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8002db8:	68fb      	ldr	r3, [r7, #12]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	e000ed04 	.word	0xe000ed04

08002dc8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	; 0x28
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02d      	beq.n	8002e3c <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002de0:	2100      	movs	r1, #0
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d000      	beq.n	8002df0 <xQueueGenericCreate+0x28>
 8002dee:	2101      	movs	r1, #1
 8002df0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d122      	bne.n	8002e3c <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002dfe:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8002e02:	d81b      	bhi.n	8002e3c <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	3348      	adds	r3, #72	; 0x48
 8002e12:	4618      	mov	r0, r3
 8002e14:	f001 fad2 	bl	80043bc <pvPortMalloc>
 8002e18:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00d      	beq.n	8002e3c <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	3348      	adds	r3, #72	; 0x48
 8002e28:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e2a:	79fa      	ldrb	r2, [r7, #7]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f805 	bl	8002e46 <prvInitialiseNewQueue>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
    }
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e002      	b.n	8002e68 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e74:	2101      	movs	r1, #1
 8002e76:	69b8      	ldr	r0, [r7, #24]
 8002e78:	f7ff ff32 	bl	8002ce0 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002e7c:	bf00      	nop
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e92:	2300      	movs	r3, #0
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002e9a:	f001 fa35 	bl	8004308 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <xQueueGenericSend+0x2c>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d129      	bne.n	8002f04 <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	6a38      	ldr	r0, [r7, #32]
 8002eb6:	f000 f931 	bl	800311c <prvCopyDataToQueue>
 8002eba:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	3324      	adds	r3, #36	; 0x24
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fe97 	bl	8003bfc <xTaskRemoveFromEventList>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002ed4:	4b3f      	ldr	r3, [pc, #252]	; (8002fd4 <xQueueGenericSend+0x150>)
 8002ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	e00a      	b.n	8002efc <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002eec:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <xQueueGenericSend+0x150>)
 8002eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002efc:	f001 fa1e 	bl	800433c <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e063      	b.n	8002fcc <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d103      	bne.n	8002f12 <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002f0a:	f001 fa17 	bl	800433c <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e05c      	b.n	8002fcc <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d106      	bne.n	8002f26 <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 ff35 	bl	8003d8c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002f26:	f001 fa09 	bl	800433c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002f2a:	f000 fbff 	bl	800372c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002f2e:	f001 f9eb 	bl	8004308 <vPortEnterCritical>
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d103      	bne.n	8002f48 <xQueueGenericSend+0xc4>
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d103      	bne.n	8002f5e <xQueueGenericSend+0xda>
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f5e:	f001 f9ed 	bl	800433c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f62:	1d3a      	adds	r2, r7, #4
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 ff24 	bl	8003db8 <xTaskCheckForTimeOut>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d124      	bne.n	8002fc0 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f76:	6a38      	ldr	r0, [r7, #32]
 8002f78:	f000 f9c8 	bl	800330c <prvIsQueueFull>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d018      	beq.n	8002fb4 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	3310      	adds	r3, #16
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fe20 	bl	8003bd0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002f90:	6a38      	ldr	r0, [r7, #32]
 8002f92:	f000 f953 	bl	800323c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002f96:	f000 fbd7 	bl	8003748 <xTaskResumeAll>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f47f af7c 	bne.w	8002e9a <xQueueGenericSend+0x16>
                {
                    taskYIELD_WITHIN_API();
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <xQueueGenericSend+0x150>)
 8002fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	e772      	b.n	8002e9a <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002fb4:	6a38      	ldr	r0, [r7, #32]
 8002fb6:	f000 f941 	bl	800323c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002fba:	f000 fbc5 	bl	8003748 <xTaskResumeAll>
 8002fbe:	e76c      	b.n	8002e9a <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002fc0:	6a38      	ldr	r0, [r7, #32]
 8002fc2:	f000 f93b 	bl	800323c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002fc6:	f000 fbbf 	bl	8003748 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8002fca:	2300      	movs	r3, #0
        }
    }
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3728      	adds	r7, #40	; 0x28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	e000ed04 	.word	0xe000ed04

08002fd8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002fec:	f001 f98c 	bl	8004308 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01f      	beq.n	800303c <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	6a38      	ldr	r0, [r7, #32]
 8003000:	f000 f8f6 	bl	80031f0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	1e5a      	subs	r2, r3, #1
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00f      	beq.n	8003034 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	3310      	adds	r3, #16
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fdef 	bl	8003bfc <xTaskRemoveFromEventList>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003024:	4b3c      	ldr	r3, [pc, #240]	; (8003118 <xQueueReceive+0x140>)
 8003026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003034:	f001 f982 	bl	800433c <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8003038:	2301      	movs	r3, #1
 800303a:	e069      	b.n	8003110 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003042:	f001 f97b 	bl	800433c <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003046:	2300      	movs	r3, #0
 8003048:	e062      	b.n	8003110 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fe99 	bl	8003d8c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800305a:	2301      	movs	r3, #1
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800305e:	f001 f96d 	bl	800433c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003062:	f000 fb63 	bl	800372c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003066:	f001 f94f 	bl	8004308 <vPortEnterCritical>
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003070:	b25b      	sxtb	r3, r3
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d103      	bne.n	8003080 <xQueueReceive+0xa8>
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003086:	b25b      	sxtb	r3, r3
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d103      	bne.n	8003096 <xQueueReceive+0xbe>
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003096:	f001 f951 	bl	800433c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800309a:	1d3a      	adds	r2, r7, #4
 800309c:	f107 0314 	add.w	r3, r7, #20
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fe88 	bl	8003db8 <xTaskCheckForTimeOut>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d123      	bne.n	80030f6 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030ae:	6a38      	ldr	r0, [r7, #32]
 80030b0:	f000 f916 	bl	80032e0 <prvIsQueueEmpty>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d017      	beq.n	80030ea <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	3324      	adds	r3, #36	; 0x24
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fd84 	bl	8003bd0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80030c8:	6a38      	ldr	r0, [r7, #32]
 80030ca:	f000 f8b7 	bl	800323c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80030ce:	f000 fb3b 	bl	8003748 <xTaskResumeAll>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d189      	bne.n	8002fec <xQueueReceive+0x14>
                {
                    taskYIELD_WITHIN_API();
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <xQueueReceive+0x140>)
 80030da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	e780      	b.n	8002fec <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80030ea:	6a38      	ldr	r0, [r7, #32]
 80030ec:	f000 f8a6 	bl	800323c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030f0:	f000 fb2a 	bl	8003748 <xTaskResumeAll>
 80030f4:	e77a      	b.n	8002fec <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80030f6:	6a38      	ldr	r0, [r7, #32]
 80030f8:	f000 f8a0 	bl	800323c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80030fc:	f000 fb24 	bl	8003748 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003100:	6a38      	ldr	r0, [r7, #32]
 8003102:	f000 f8ed 	bl	80032e0 <prvIsQueueEmpty>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	f43f af6f 	beq.w	8002fec <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800310e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003110:	4618      	mov	r0, r3
 8003112:	3728      	adds	r7, #40	; 0x28
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	e000ed04 	.word	0xe000ed04

0800311c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10d      	bne.n	8003156 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d14d      	bne.n	80031de <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 ff3e 	bl	8003fc8 <xTaskPriorityDisinherit>
 800314c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	e043      	b.n	80031de <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d119      	bne.n	8003190 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6858      	ldr	r0, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	461a      	mov	r2, r3
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	f001 faf4 	bl	8004754 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	441a      	add	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	d32b      	bcc.n	80031de <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	e026      	b.n	80031de <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68d8      	ldr	r0, [r3, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	461a      	mov	r2, r3
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	f001 fada 	bl	8004754 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	425b      	negs	r3, r3
 80031aa:	441a      	add	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d207      	bcs.n	80031cc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	425b      	negs	r3, r3
 80031c6:	441a      	add	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d105      	bne.n	80031de <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	3b01      	subs	r3, #1
 80031dc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80031e6:	697b      	ldr	r3, [r7, #20]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d018      	beq.n	8003234 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	441a      	add	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	429a      	cmp	r2, r3
 800321a:	d303      	bcc.n	8003224 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68d9      	ldr	r1, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	461a      	mov	r2, r3
 800322e:	6838      	ldr	r0, [r7, #0]
 8003230:	f001 fa90 	bl	8004754 <memcpy>
    }
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003244:	f001 f860 	bl	8004308 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800324e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003250:	e011      	b.n	8003276 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	2b00      	cmp	r3, #0
 8003258:	d012      	beq.n	8003280 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3324      	adds	r3, #36	; 0x24
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fccc 	bl	8003bfc <xTaskRemoveFromEventList>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800326a:	f000 fdef 	bl	8003e4c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	3b01      	subs	r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	dce9      	bgt.n	8003252 <prvUnlockQueue+0x16>
 800327e:	e000      	b.n	8003282 <prvUnlockQueue+0x46>
                    break;
 8003280:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	22ff      	movs	r2, #255	; 0xff
 8003286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800328a:	f001 f857 	bl	800433c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800328e:	f001 f83b 	bl	8004308 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003298:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800329a:	e011      	b.n	80032c0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d012      	beq.n	80032ca <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3310      	adds	r3, #16
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fca7 	bl	8003bfc <xTaskRemoveFromEventList>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80032b4:	f000 fdca 	bl	8003e4c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80032b8:	7bbb      	ldrb	r3, [r7, #14]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	dce9      	bgt.n	800329c <prvUnlockQueue+0x60>
 80032c8:	e000      	b.n	80032cc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80032ca:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	22ff      	movs	r2, #255	; 0xff
 80032d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80032d4:	f001 f832 	bl	800433c <vPortExitCritical>
}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80032e8:	f001 f80e 	bl	8004308 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80032f4:	2301      	movs	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	e001      	b.n	80032fe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80032fe:	f001 f81d 	bl	800433c <vPortExitCritical>

    return xReturn;
 8003302:	68fb      	ldr	r3, [r7, #12]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003314:	f000 fff8 	bl	8004308 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	429a      	cmp	r2, r3
 8003322:	d102      	bne.n	800332a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003324:	2301      	movs	r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e001      	b.n	800332e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800332e:	f001 f805 	bl	800433c <vPortExitCritical>

    return xReturn;
 8003332:	68fb      	ldr	r3, [r7, #12]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE usStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800333c:	b580      	push	{r7, lr}
 800333e:	b08a      	sub	sp, #40	; 0x28
 8003340:	af04      	add	r7, sp, #16
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	80fb      	strh	r3, [r7, #6]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4618      	mov	r0, r3
 8003352:	f001 f833 	bl	80043bc <pvPortMalloc>
 8003356:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d013      	beq.n	8003386 <prvCreateTask+0x4a>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800335e:	2054      	movs	r0, #84	; 0x54
 8003360:	f001 f82c 	bl	80043bc <pvPortMalloc>
 8003364:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <prvCreateTask+0x42>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800336c:	2254      	movs	r2, #84	; 0x54
 800336e:	2100      	movs	r1, #0
 8003370:	6978      	ldr	r0, [r7, #20]
 8003372:	f001 f9c3 	bl	80046fc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
 800337c:	e005      	b.n	800338a <prvCreateTask+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800337e:	6938      	ldr	r0, [r7, #16]
 8003380:	f001 f8ca 	bl	8004518 <vPortFree>
 8003384:	e001      	b.n	800338a <prvCreateTask+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00d      	beq.n	80033ac <prvCreateTask+0x70>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003390:	88fa      	ldrh	r2, [r7, #6]
 8003392:	2300      	movs	r3, #0
 8003394:	9303      	str	r3, [sp, #12]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	9302      	str	r3, [sp, #8]
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f829 	bl	80033fe <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80033ac:	697b      	ldr	r3, [r7, #20]
    }
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b088      	sub	sp, #32
 80033ba:	af02      	add	r7, sp, #8
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	603b      	str	r3, [r7, #0]
 80033c2:	4613      	mov	r3, r2
 80033c4:	80fb      	strh	r3, [r7, #6]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f7ff ffb1 	bl	800333c <prvCreateTask>
 80033da:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <xTaskCreate+0x38>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = tskNO_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80033e2:	6938      	ldr	r0, [r7, #16]
 80033e4:	f000 f874 	bl	80034d0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80033e8:	2301      	movs	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e002      	b.n	80033f4 <xTaskCreate+0x3e>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033ee:	f04f 33ff 	mov.w	r3, #4294967295
 80033f2:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80033f4:	697b      	ldr	r3, [r7, #20]
    }
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003416:	3b01      	subs	r3, #1
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f023 0307 	bic.w	r3, r3, #7
 8003424:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01e      	beq.n	800346a <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	e012      	b.n	8003458 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	4413      	add	r3, r2
 8003438:	7819      	ldrb	r1, [r3, #0]
 800343a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	4413      	add	r3, r2
 8003440:	3334      	adds	r3, #52	; 0x34
 8003442:	460a      	mov	r2, r1
 8003444:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	4413      	add	r3, r2
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	3301      	adds	r3, #1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b0f      	cmp	r3, #15
 800345c:	d9e9      	bls.n	8003432 <prvInitialiseNewTask+0x34>
 800345e:	e000      	b.n	8003462 <prvInitialiseNewTask+0x64>
            {
                break;
 8003460:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d901      	bls.n	8003474 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003470:	2304      	movs	r3, #4
 8003472:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	6a3a      	ldr	r2, [r7, #32]
 8003478:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	3304      	adds	r3, #4
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fbbb 	bl	8002c00 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	3318      	adds	r3, #24
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fbb6 	bl	8002c00 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003498:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f1c3 0205 	rsb	r2, r3, #5
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	68f9      	ldr	r1, [r7, #12]
 80034ae:	6938      	ldr	r0, [r7, #16]
 80034b0:	f000 fe8e 	bl	80041d0 <pxPortInitialiseStack>
 80034b4:	4602      	mov	r2, r0
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034c6:	bf00      	nop
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80034d8:	f000 ff16 	bl	8004308 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks++;
 80034dc:	4b3e      	ldr	r3, [pc, #248]	; (80035d8 <prvAddNewTaskToReadyList+0x108>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	4a3d      	ldr	r2, [pc, #244]	; (80035d8 <prvAddNewTaskToReadyList+0x108>)
 80034e4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80034e6:	4b3d      	ldr	r3, [pc, #244]	; (80035dc <prvAddNewTaskToReadyList+0x10c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80034ee:	4a3b      	ldr	r2, [pc, #236]	; (80035dc <prvAddNewTaskToReadyList+0x10c>)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034f4:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <prvAddNewTaskToReadyList+0x108>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d110      	bne.n	800351e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80034fc:	f000 fcca 	bl	8003e94 <prvInitialiseTaskLists>
 8003500:	e00d      	b.n	800351e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003502:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <prvAddNewTaskToReadyList+0x110>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800350a:	4b34      	ldr	r3, [pc, #208]	; (80035dc <prvAddNewTaskToReadyList+0x10c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	429a      	cmp	r2, r3
 8003516:	d802      	bhi.n	800351e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003518:	4a30      	ldr	r2, [pc, #192]	; (80035dc <prvAddNewTaskToReadyList+0x10c>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800351e:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <prvAddNewTaskToReadyList+0x114>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3301      	adds	r3, #1
 8003524:	4a2f      	ldr	r2, [pc, #188]	; (80035e4 <prvAddNewTaskToReadyList+0x114>)
 8003526:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	2201      	movs	r2, #1
 800352e:	409a      	lsls	r2, r3
 8003530:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <prvAddNewTaskToReadyList+0x118>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	4a2c      	ldr	r2, [pc, #176]	; (80035e8 <prvAddNewTaskToReadyList+0x118>)
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	492b      	ldr	r1, [pc, #172]	; (80035ec <prvAddNewTaskToReadyList+0x11c>)
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3304      	adds	r3, #4
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	3204      	adds	r2, #4
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1d1a      	adds	r2, r3, #4
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4a1b      	ldr	r2, [pc, #108]	; (80035ec <prvAddNewTaskToReadyList+0x11c>)
 800357e:	441a      	add	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	615a      	str	r2, [r3, #20]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003588:	4918      	ldr	r1, [pc, #96]	; (80035ec <prvAddNewTaskToReadyList+0x11c>)
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	1c59      	adds	r1, r3, #1
 8003598:	4814      	ldr	r0, [pc, #80]	; (80035ec <prvAddNewTaskToReadyList+0x11c>)
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4403      	add	r3, r0
 80035a4:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80035a6:	f000 fec9 	bl	800433c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <prvAddNewTaskToReadyList+0x110>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00e      	beq.n	80035d0 <prvAddNewTaskToReadyList+0x100>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <prvAddNewTaskToReadyList+0x10c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	429a      	cmp	r2, r3
 80035be:	d207      	bcs.n	80035d0 <prvAddNewTaskToReadyList+0x100>
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <prvAddNewTaskToReadyList+0x120>)
 80035c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000178 	.word	0x20000178
 80035dc:	200000a0 	.word	0x200000a0
 80035e0:	20000184 	.word	0x20000184
 80035e4:	20000194 	.word	0x20000194
 80035e8:	20000180 	.word	0x20000180
 80035ec:	200000a4 	.word	0x200000a4
 80035f0:	e000ed04 	.word	0xe000ed04

080035f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <vTaskDelay+0x24>
        {
            vTaskSuspendAll();
 8003606:	f000 f891 	bl	800372c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800360a:	2100      	movs	r1, #0
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fd5d 	bl	80040cc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003612:	f000 f899 	bl	8003748 <xTaskResumeAll>
 8003616:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d107      	bne.n	800362e <vTaskDelay+0x3a>
        {
            taskYIELD_WITHIN_API();
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <vTaskDelay+0x44>)
 8003620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	e000ed04 	.word	0xe000ed04

0800363c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003642:	2301      	movs	r3, #1
 8003644:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003646:	2300      	movs	r3, #0
 8003648:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e011      	b.n	8003674 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003650:	4a1c      	ldr	r2, [pc, #112]	; (80036c4 <prvCreateIdleTasks+0x88>)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	4413      	add	r3, r2
 8003656:	7819      	ldrb	r1, [r3, #0]
 8003658:	463a      	mov	r2, r7
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	4413      	add	r3, r2
 800365e:	460a      	mov	r2, r1
 8003660:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003662:	463a      	mov	r2, r7
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	4413      	add	r3, r2
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d006      	beq.n	800367c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	3301      	adds	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2b0f      	cmp	r3, #15
 8003678:	ddea      	ble.n	8003650 <prvCreateIdleTasks+0x14>
 800367a:	e000      	b.n	800367e <prvCreateIdleTasks+0x42>
        {
            break;
 800367c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	e015      	b.n	80036b0 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003684:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <prvCreateIdleTasks+0x8c>)
 8003686:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4a0f      	ldr	r2, [pc, #60]	; (80036cc <prvCreateIdleTasks+0x90>)
 800368e:	4413      	add	r3, r2
 8003690:	4639      	mov	r1, r7
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	2300      	movs	r3, #0
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2300      	movs	r3, #0
 800369a:	2280      	movs	r2, #128	; 0x80
 800369c:	6938      	ldr	r0, [r7, #16]
 800369e:	f7ff fe8a 	bl	80033b6 <xTaskCreate>
 80036a2:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	3301      	adds	r3, #1
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	dde6      	ble.n	8003684 <prvCreateIdleTasks+0x48>
 80036b6:	e000      	b.n	80036ba <prvCreateIdleTasks+0x7e>
        {
            break;
 80036b8:	bf00      	nop
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xReturn;
 80036ba:	69fb      	ldr	r3, [r7, #28]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	080047d8 	.word	0x080047d8
 80036c8:	08003e65 	.word	0x08003e65
 80036cc:	2000019c 	.word	0x2000019c

080036d0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80036d6:	f7ff ffb1 	bl	800363c <prvCreateIdleTasks>
 80036da:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d115      	bne.n	800370e <vTaskStartScheduler+0x3e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	603b      	str	r3, [r7, #0]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80036f4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <vTaskStartScheduler+0x4c>)
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <vTaskStartScheduler+0x50>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <vTaskStartScheduler+0x54>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800370a:	f000 fdc5 	bl	8004298 <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <vTaskStartScheduler+0x58>)
 8003710:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000198 	.word	0x20000198
 8003720:	20000184 	.word	0x20000184
 8003724:	2000017c 	.word	0x2000017c
 8003728:	2000000c 	.word	0x2000000c

0800372c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        ++uxSchedulerSuspended;
 8003730:	4b04      	ldr	r3, [pc, #16]	; (8003744 <vTaskSuspendAll+0x18>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3301      	adds	r3, #1
 8003736:	4a03      	ldr	r2, [pc, #12]	; (8003744 <vTaskSuspendAll+0x18>)
 8003738:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800373a:	bf00      	nop
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	200001a0 	.word	0x200001a0

08003748 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003756:	f000 fdd7 	bl	8004308 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            --uxSchedulerSuspended;
 800375e:	4b6c      	ldr	r3, [pc, #432]	; (8003910 <xTaskResumeAll+0x1c8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3b01      	subs	r3, #1
 8003764:	4a6a      	ldr	r2, [pc, #424]	; (8003910 <xTaskResumeAll+0x1c8>)
 8003766:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003768:	4b69      	ldr	r3, [pc, #420]	; (8003910 <xTaskResumeAll+0x1c8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f040 80c8 	bne.w	8003902 <xTaskResumeAll+0x1ba>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003772:	4b68      	ldr	r3, [pc, #416]	; (8003914 <xTaskResumeAll+0x1cc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 80c3 	beq.w	8003902 <xTaskResumeAll+0x1ba>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800377c:	e08c      	b.n	8003898 <xTaskResumeAll+0x150>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800377e:	4b66      	ldr	r3, [pc, #408]	; (8003918 <xTaskResumeAll+0x1d0>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	6a12      	ldr	r2, [r2, #32]
 8003794:	609a      	str	r2, [r3, #8]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	69d2      	ldr	r2, [r2, #28]
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3318      	adds	r3, #24
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d103      	bne.n	80037b4 <xTaskResumeAll+0x6c>
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2200      	movs	r2, #0
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	1e5a      	subs	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	68d2      	ldr	r2, [r2, #12]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	6892      	ldr	r2, [r2, #8]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3304      	adds	r3, #4
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d103      	bne.n	80037f2 <xTaskResumeAll+0xaa>
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	2200      	movs	r2, #0
 80037f6:	615a      	str	r2, [r3, #20]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	1e5a      	subs	r2, r3, #1
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	2201      	movs	r2, #1
 8003808:	409a      	lsls	r2, r3
 800380a:	4b44      	ldr	r3, [pc, #272]	; (800391c <xTaskResumeAll+0x1d4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4313      	orrs	r3, r2
 8003810:	4a42      	ldr	r2, [pc, #264]	; (800391c <xTaskResumeAll+0x1d4>)
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	4941      	ldr	r1, [pc, #260]	; (8003920 <xTaskResumeAll+0x1d8>)
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3304      	adds	r3, #4
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	3204      	adds	r2, #4
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	1d1a      	adds	r2, r3, #4
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4a32      	ldr	r2, [pc, #200]	; (8003920 <xTaskResumeAll+0x1d8>)
 8003858:	441a      	add	r2, r3
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	615a      	str	r2, [r3, #20]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003862:	492f      	ldr	r1, [pc, #188]	; (8003920 <xTaskResumeAll+0x1d8>)
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	1c59      	adds	r1, r3, #1
 8003872:	482b      	ldr	r0, [pc, #172]	; (8003920 <xTaskResumeAll+0x1d8>)
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4403      	add	r3, r0
 800387e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003884:	4b27      	ldr	r3, [pc, #156]	; (8003924 <xTaskResumeAll+0x1dc>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	429a      	cmp	r2, r3
 800388c:	d904      	bls.n	8003898 <xTaskResumeAll+0x150>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800388e:	4a26      	ldr	r2, [pc, #152]	; (8003928 <xTaskResumeAll+0x1e0>)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2101      	movs	r1, #1
 8003894:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003898:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <xTaskResumeAll+0x1d0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	f47f af6e 	bne.w	800377e <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <xTaskResumeAll+0x164>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80038a8:	f000 fb72 	bl	8003f90 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038ac:	4b1f      	ldr	r3, [pc, #124]	; (800392c <xTaskResumeAll+0x1e4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d012      	beq.n	80038de <xTaskResumeAll+0x196>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80038b8:	f000 f83c 	bl	8003934 <xTaskIncrementTick>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <xTaskResumeAll+0x184>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80038c2:	4a19      	ldr	r2, [pc, #100]	; (8003928 <xTaskResumeAll+0x1e0>)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2101      	movs	r1, #1
 80038c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1ef      	bne.n	80038b8 <xTaskResumeAll+0x170>

                            xPendedTicks = 0;
 80038d8:	4b14      	ldr	r3, [pc, #80]	; (800392c <xTaskResumeAll+0x1e4>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80038de:	4a12      	ldr	r2, [pc, #72]	; (8003928 <xTaskResumeAll+0x1e0>)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <xTaskResumeAll+0x1ba>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80038ea:	2301      	movs	r3, #1
 80038ec:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <xTaskResumeAll+0x1dc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <xTaskResumeAll+0x1e8>)
 80038f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003902:	f000 fd1b 	bl	800433c <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8003906:	69bb      	ldr	r3, [r7, #24]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3720      	adds	r7, #32
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200001a0 	.word	0x200001a0
 8003914:	20000178 	.word	0x20000178
 8003918:	20000138 	.word	0x20000138
 800391c:	20000180 	.word	0x20000180
 8003920:	200000a4 	.word	0x200000a4
 8003924:	200000a0 	.word	0x200000a0
 8003928:	2000018c 	.word	0x2000018c
 800392c:	20000188 	.word	0x20000188
 8003930:	e000ed04 	.word	0xe000ed04

08003934 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800393e:	4b75      	ldr	r3, [pc, #468]	; (8003b14 <xTaskIncrementTick+0x1e0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f040 80dc 	bne.w	8003b00 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003948:	4b73      	ldr	r3, [pc, #460]	; (8003b18 <xTaskIncrementTick+0x1e4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003950:	4a71      	ldr	r2, [pc, #452]	; (8003b18 <xTaskIncrementTick+0x1e4>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d110      	bne.n	800397e <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 800395c:	4b6f      	ldr	r3, [pc, #444]	; (8003b1c <xTaskIncrementTick+0x1e8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	4b6f      	ldr	r3, [pc, #444]	; (8003b20 <xTaskIncrementTick+0x1ec>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a6d      	ldr	r2, [pc, #436]	; (8003b1c <xTaskIncrementTick+0x1e8>)
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4a6d      	ldr	r2, [pc, #436]	; (8003b20 <xTaskIncrementTick+0x1ec>)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b6c      	ldr	r3, [pc, #432]	; (8003b24 <xTaskIncrementTick+0x1f0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	4a6b      	ldr	r2, [pc, #428]	; (8003b24 <xTaskIncrementTick+0x1f0>)
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	f000 fb09 	bl	8003f90 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800397e:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <xTaskIncrementTick+0x1f4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	429a      	cmp	r2, r3
 8003986:	f0c0 80a6 	bcc.w	8003ad6 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800398a:	4b64      	ldr	r3, [pc, #400]	; (8003b1c <xTaskIncrementTick+0x1e8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d104      	bne.n	800399e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003994:	4b64      	ldr	r3, [pc, #400]	; (8003b28 <xTaskIncrementTick+0x1f4>)
 8003996:	f04f 32ff 	mov.w	r2, #4294967295
 800399a:	601a      	str	r2, [r3, #0]
                    break;
 800399c:	e09b      	b.n	8003ad6 <xTaskIncrementTick+0x1a2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800399e:	4b5f      	ldr	r3, [pc, #380]	; (8003b1c <xTaskIncrementTick+0x1e8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d203      	bcs.n	80039be <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80039b6:	4a5c      	ldr	r2, [pc, #368]	; (8003b28 <xTaskIncrementTick+0x1f4>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6013      	str	r3, [r2, #0]
                        break;
 80039bc:	e08b      	b.n	8003ad6 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	68d2      	ldr	r2, [r2, #12]
 80039cc:	609a      	str	r2, [r3, #8]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	6892      	ldr	r2, [r2, #8]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	3304      	adds	r3, #4
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d103      	bne.n	80039ec <xTaskIncrementTick+0xb8>
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2200      	movs	r2, #0
 80039f0:	615a      	str	r2, [r3, #20]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	1e5a      	subs	r2, r3, #1
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01e      	beq.n	8003a42 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	6a12      	ldr	r2, [r2, #32]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	69d2      	ldr	r2, [r2, #28]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	3318      	adds	r3, #24
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d103      	bne.n	8003a32 <xTaskIncrementTick+0xfe>
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	6a1a      	ldr	r2, [r3, #32]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2200      	movs	r2, #0
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	1e5a      	subs	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	2201      	movs	r2, #1
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <xTaskIncrementTick+0x1f8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	4a36      	ldr	r2, [pc, #216]	; (8003b2c <xTaskIncrementTick+0x1f8>)
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a58:	4935      	ldr	r1, [pc, #212]	; (8003b30 <xTaskIncrementTick+0x1fc>)
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	3304      	adds	r3, #4
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	60da      	str	r2, [r3, #12]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	3204      	adds	r2, #4
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1d1a      	adds	r2, r3, #4
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4a26      	ldr	r2, [pc, #152]	; (8003b30 <xTaskIncrementTick+0x1fc>)
 8003a98:	441a      	add	r2, r3
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	615a      	str	r2, [r3, #20]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa2:	4923      	ldr	r1, [pc, #140]	; (8003b30 <xTaskIncrementTick+0x1fc>)
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	1c59      	adds	r1, r3, #1
 8003ab2:	481f      	ldr	r0, [pc, #124]	; (8003b30 <xTaskIncrementTick+0x1fc>)
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4403      	add	r3, r0
 8003abe:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac4:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <xTaskIncrementTick+0x200>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aca:	429a      	cmp	r2, r3
 8003acc:	f67f af5d 	bls.w	800398a <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad4:	e759      	b.n	800398a <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003ad6:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <xTaskIncrementTick+0x200>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003adc:	4914      	ldr	r1, [pc, #80]	; (8003b30 <xTaskIncrementTick+0x1fc>)
 8003ade:	4613      	mov	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d901      	bls.n	8003af2 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 8003aee:	2301      	movs	r3, #1
 8003af0:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003af2:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <xTaskIncrementTick+0x204>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	e004      	b.n	8003b0a <xTaskIncrementTick+0x1d6>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        ++xPendedTicks;
 8003b00:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <xTaskIncrementTick+0x208>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3301      	adds	r3, #1
 8003b06:	4a0d      	ldr	r2, [pc, #52]	; (8003b3c <xTaskIncrementTick+0x208>)
 8003b08:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	200001a0 	.word	0x200001a0
 8003b18:	2000017c 	.word	0x2000017c
 8003b1c:	20000130 	.word	0x20000130
 8003b20:	20000134 	.word	0x20000134
 8003b24:	20000190 	.word	0x20000190
 8003b28:	20000198 	.word	0x20000198
 8003b2c:	20000180 	.word	0x20000180
 8003b30:	200000a4 	.word	0x200000a4
 8003b34:	200000a0 	.word	0x200000a0
 8003b38:	2000018c 	.word	0x2000018c
 8003b3c:	20000188 	.word	0x20000188

08003b40 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003b46:	4b1d      	ldr	r3, [pc, #116]	; (8003bbc <vTaskSwitchContext+0x7c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003b4e:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <vTaskSwitchContext+0x80>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003b54:	e02b      	b.n	8003bae <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 8003b56:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <vTaskSwitchContext+0x80>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <vTaskSwitchContext+0x84>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	fab3 f383 	clz	r3, r3
 8003b68:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	f1c3 031f 	rsb	r3, r3, #31
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <vTaskSwitchContext+0x88>)
 8003b7e:	4413      	add	r3, r2
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	3308      	adds	r3, #8
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d103      	bne.n	8003ba0 <vTaskSwitchContext+0x60>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <vTaskSwitchContext+0x8c>)
 8003ba8:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <vTaskSwitchContext+0x8c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
    }
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	200001a0 	.word	0x200001a0
 8003bc0:	2000018c 	.word	0x2000018c
 8003bc4:	20000180 	.word	0x20000180
 8003bc8:	200000a4 	.word	0x200000a4
 8003bcc:	200000a0 	.word	0x200000a0

08003bd0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <vTaskPlaceOnEventList+0x28>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3318      	adds	r3, #24
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff f819 	bl	8002c1a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003be8:	2101      	movs	r1, #1
 8003bea:	6838      	ldr	r0, [r7, #0]
 8003bec:	f000 fa6e 	bl	80040cc <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200000a0 	.word	0x200000a0

08003bfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b089      	sub	sp, #36	; 0x24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	6a12      	ldr	r2, [r2, #32]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	69d2      	ldr	r2, [r2, #28]
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	3318      	adds	r3, #24
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d103      	bne.n	8003c3a <xTaskRemoveFromEventList+0x3e>
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	6a1a      	ldr	r2, [r3, #32]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	605a      	str	r2, [r3, #4]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	1e5a      	subs	r2, r3, #1
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003c4a:	4b4a      	ldr	r3, [pc, #296]	; (8003d74 <xTaskRemoveFromEventList+0x178>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d15e      	bne.n	8003d10 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	68d2      	ldr	r2, [r2, #12]
 8003c60:	609a      	str	r2, [r3, #8]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	6892      	ldr	r2, [r2, #8]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	3304      	adds	r3, #4
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d103      	bne.n	8003c80 <xTaskRemoveFromEventList+0x84>
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	605a      	str	r2, [r3, #4]
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	2200      	movs	r2, #0
 8003c84:	615a      	str	r2, [r3, #20]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	1e5a      	subs	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	2201      	movs	r2, #1
 8003c96:	409a      	lsls	r2, r3
 8003c98:	4b37      	ldr	r3, [pc, #220]	; (8003d78 <xTaskRemoveFromEventList+0x17c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	4a36      	ldr	r2, [pc, #216]	; (8003d78 <xTaskRemoveFromEventList+0x17c>)
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca6:	4935      	ldr	r1, [pc, #212]	; (8003d7c <xTaskRemoveFromEventList+0x180>)
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	609a      	str	r2, [r3, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	3204      	adds	r2, #4
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	1d1a      	adds	r2, r3, #4
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4a25      	ldr	r2, [pc, #148]	; (8003d7c <xTaskRemoveFromEventList+0x180>)
 8003ce6:	441a      	add	r2, r3
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	615a      	str	r2, [r3, #20]
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	4922      	ldr	r1, [pc, #136]	; (8003d7c <xTaskRemoveFromEventList+0x180>)
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	1c59      	adds	r1, r3, #1
 8003d00:	481e      	ldr	r0, [pc, #120]	; (8003d7c <xTaskRemoveFromEventList+0x180>)
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4403      	add	r3, r0
 8003d0c:	6019      	str	r1, [r3, #0]
 8003d0e:	e01b      	b.n	8003d48 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <xTaskRemoveFromEventList+0x184>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	61da      	str	r2, [r3, #28]
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	621a      	str	r2, [r3, #32]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	3218      	adds	r2, #24
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	f103 0218 	add.w	r2, r3, #24
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	4a11      	ldr	r2, [pc, #68]	; (8003d80 <xTaskRemoveFromEventList+0x184>)
 8003d3c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <xTaskRemoveFromEventList+0x184>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3301      	adds	r3, #1
 8003d44:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <xTaskRemoveFromEventList+0x184>)
 8003d46:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4c:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <xTaskRemoveFromEventList+0x188>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d905      	bls.n	8003d62 <xTaskRemoveFromEventList+0x166>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003d56:	2301      	movs	r3, #1
 8003d58:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <xTaskRemoveFromEventList+0x18c>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	e001      	b.n	8003d66 <xTaskRemoveFromEventList+0x16a>
        }
        else
        {
            xReturn = pdFALSE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8003d66:	69fb      	ldr	r3, [r7, #28]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3724      	adds	r7, #36	; 0x24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	200001a0 	.word	0x200001a0
 8003d78:	20000180 	.word	0x20000180
 8003d7c:	200000a4 	.word	0x200000a4
 8003d80:	20000138 	.word	0x20000138
 8003d84:	200000a0 	.word	0x200000a0
 8003d88:	2000018c 	.word	0x2000018c

08003d8c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <vTaskInternalSetTimeOutState+0x24>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <vTaskInternalSetTimeOutState+0x28>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	20000190 	.word	0x20000190
 8003db4:	2000017c 	.word	0x2000017c

08003db8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8003dc2:	f000 faa1 	bl	8004308 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003dc6:	4b1f      	ldr	r3, [pc, #124]	; (8003e44 <xTaskCheckForTimeOut+0x8c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d102      	bne.n	8003de6 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	e026      	b.n	8003e34 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <xTaskCheckForTimeOut+0x90>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d00a      	beq.n	8003e08 <xTaskCheckForTimeOut+0x50>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d305      	bcc.n	8003e08 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	e015      	b.n	8003e34 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d20b      	bcs.n	8003e2a <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad2      	subs	r2, r2, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ffb4 	bl	8003d8c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	e004      	b.n	8003e34 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e30:	2301      	movs	r3, #1
 8003e32:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003e34:	f000 fa82 	bl	800433c <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8003e38:	697b      	ldr	r3, [r7, #20]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	2000017c 	.word	0x2000017c
 8003e48:	20000190 	.word	0x20000190

08003e4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <vTaskMissedYield+0x14>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	2000018c 	.word	0x2000018c

08003e64 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003e6c:	f000 f852 	bl	8003f14 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <prvIdleTask+0x28>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d9f9      	bls.n	8003e6c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <prvIdleTask+0x2c>)
 8003e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003e88:	e7f0      	b.n	8003e6c <prvIdleTask+0x8>
 8003e8a:	bf00      	nop
 8003e8c:	200000a4 	.word	0x200000a4
 8003e90:	e000ed04 	.word	0xe000ed04

08003e94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	e00c      	b.n	8003eba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <prvInitialiseTaskLists+0x60>)
 8003eac:	4413      	add	r3, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe fe86 	bl	8002bc0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d9ef      	bls.n	8003ea0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003ec0:	480d      	ldr	r0, [pc, #52]	; (8003ef8 <prvInitialiseTaskLists+0x64>)
 8003ec2:	f7fe fe7d 	bl	8002bc0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003ec6:	480d      	ldr	r0, [pc, #52]	; (8003efc <prvInitialiseTaskLists+0x68>)
 8003ec8:	f7fe fe7a 	bl	8002bc0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003ecc:	480c      	ldr	r0, [pc, #48]	; (8003f00 <prvInitialiseTaskLists+0x6c>)
 8003ece:	f7fe fe77 	bl	8002bc0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003ed2:	480c      	ldr	r0, [pc, #48]	; (8003f04 <prvInitialiseTaskLists+0x70>)
 8003ed4:	f7fe fe74 	bl	8002bc0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003ed8:	480b      	ldr	r0, [pc, #44]	; (8003f08 <prvInitialiseTaskLists+0x74>)
 8003eda:	f7fe fe71 	bl	8002bc0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <prvInitialiseTaskLists+0x78>)
 8003ee0:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <prvInitialiseTaskLists+0x64>)
 8003ee2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ee4:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <prvInitialiseTaskLists+0x7c>)
 8003ee6:	4a05      	ldr	r2, [pc, #20]	; (8003efc <prvInitialiseTaskLists+0x68>)
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200000a4 	.word	0x200000a4
 8003ef8:	20000108 	.word	0x20000108
 8003efc:	2000011c 	.word	0x2000011c
 8003f00:	20000138 	.word	0x20000138
 8003f04:	2000014c 	.word	0x2000014c
 8003f08:	20000164 	.word	0x20000164
 8003f0c:	20000130 	.word	0x20000130
 8003f10:	20000134 	.word	0x20000134

08003f14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f1a:	e019      	b.n	8003f50 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003f1c:	f000 f9f4 	bl	8004308 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f20:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <prvCheckTasksWaitingTermination+0x50>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe fead 	bl	8002c8c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003f32:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <prvCheckTasksWaitingTermination+0x54>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <prvCheckTasksWaitingTermination+0x54>)
 8003f3a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <prvCheckTasksWaitingTermination+0x58>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <prvCheckTasksWaitingTermination+0x58>)
 8003f44:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003f46:	f000 f9f9 	bl	800433c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f810 	bl	8003f70 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <prvCheckTasksWaitingTermination+0x58>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e1      	bne.n	8003f1c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	2000014c 	.word	0x2000014c
 8003f68:	20000178 	.word	0x20000178
 8003f6c:	20000160 	.word	0x20000160

08003f70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 facb 	bl	8004518 <vPortFree>
            vPortFree( pxTCB );
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fac8 	bl	8004518 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f94:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <prvResetNextTaskUnblockTime+0x30>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d104      	bne.n	8003fa8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003f9e:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <prvResetNextTaskUnblockTime+0x34>)
 8003fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003fa6:	e005      	b.n	8003fb4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <prvResetNextTaskUnblockTime+0x30>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <prvResetNextTaskUnblockTime+0x34>)
 8003fb2:	6013      	str	r3, [r2, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	20000130 	.word	0x20000130
 8003fc4:	20000198 	.word	0x20000198

08003fc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d06c      	beq.n	80040b8 <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe2:	1e5a      	subs	r2, r3, #1
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d061      	beq.n	80040b8 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d15d      	bne.n	80040b8 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4618      	mov	r0, r3
 8004002:	f7fe fe43 	bl	8002c8c <uxListRemove>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	2201      	movs	r2, #1
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43da      	mvns	r2, r3
 8004018:	4b2a      	ldr	r3, [pc, #168]	; (80040c4 <xTaskPriorityDisinherit+0xfc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4013      	ands	r3, r2
 800401e:	4a29      	ldr	r2, [pc, #164]	; (80040c4 <xTaskPriorityDisinherit+0xfc>)
 8004020:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	f1c3 0205 	rsb	r2, r3, #5
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	2201      	movs	r2, #1
 800403c:	409a      	lsls	r2, r3
 800403e:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <xTaskPriorityDisinherit+0xfc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4313      	orrs	r3, r2
 8004044:	4a1f      	ldr	r2, [pc, #124]	; (80040c4 <xTaskPriorityDisinherit+0xfc>)
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	491e      	ldr	r1, [pc, #120]	; (80040c8 <xTaskPriorityDisinherit+0x100>)
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	3304      	adds	r3, #4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	60da      	str	r2, [r3, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	3204      	adds	r2, #4
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1d1a      	adds	r2, r3, #4
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4a0f      	ldr	r2, [pc, #60]	; (80040c8 <xTaskPriorityDisinherit+0x100>)
 800408c:	441a      	add	r2, r3
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	615a      	str	r2, [r3, #20]
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004096:	490c      	ldr	r1, [pc, #48]	; (80040c8 <xTaskPriorityDisinherit+0x100>)
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	1c59      	adds	r1, r3, #1
 80040a6:	4808      	ldr	r0, [pc, #32]	; (80040c8 <xTaskPriorityDisinherit+0x100>)
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4403      	add	r3, r0
 80040b2:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80040b4:	2301      	movs	r3, #1
 80040b6:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 80040b8:	697b      	ldr	r3, [r7, #20]
    }
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000180 	.word	0x20000180
 80040c8:	200000a4 	.word	0x200000a4

080040cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80040d6:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80040dc:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <prvAddCurrentTaskToDelayedList+0xec>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80040e2:	4b36      	ldr	r3, [pc, #216]	; (80041bc <prvAddCurrentTaskToDelayedList+0xf0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040e8:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3304      	adds	r3, #4
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe fdcc 	bl	8002c8c <uxListRemove>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80040fa:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	2201      	movs	r2, #1
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43da      	mvns	r2, r3
 8004108:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xf8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4013      	ands	r3, r2
 800410e:	4a2d      	ldr	r2, [pc, #180]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004110:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d124      	bne.n	8004164 <prvAddCurrentTaskToDelayedList+0x98>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d021      	beq.n	8004164 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004120:	4b29      	ldr	r3, [pc, #164]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	609a      	str	r2, [r3, #8]
 800412e:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	6892      	ldr	r2, [r2, #8]
 8004136:	60da      	str	r2, [r3, #12]
 8004138:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	3204      	adds	r2, #4
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	4b1e      	ldr	r3, [pc, #120]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	1d1a      	adds	r2, r3, #4
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	609a      	str	r2, [r3, #8]
 800414e:	4b1c      	ldr	r3, [pc, #112]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004154:	615a      	str	r2, [r3, #20]
 8004156:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3301      	adds	r3, #1
 800415c:	4a1a      	ldr	r2, [pc, #104]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004162:	e022      	b.n	80041aa <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4413      	add	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800416c:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	429a      	cmp	r2, r3
 800417a:	d207      	bcs.n	800418c <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800417c:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3304      	adds	r3, #4
 8004182:	4619      	mov	r1, r3
 8004184:	6978      	ldr	r0, [r7, #20]
 8004186:	f7fe fd48 	bl	8002c1a <vListInsert>
}
 800418a:	e00e      	b.n	80041aa <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3304      	adds	r3, #4
 8004192:	4619      	mov	r1, r3
 8004194:	69b8      	ldr	r0, [r7, #24]
 8004196:	f7fe fd40 	bl	8002c1a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800419a:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <prvAddCurrentTaskToDelayedList+0x100>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d202      	bcs.n	80041aa <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80041a4:	4a09      	ldr	r2, [pc, #36]	; (80041cc <prvAddCurrentTaskToDelayedList+0x100>)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6013      	str	r3, [r2, #0]
}
 80041aa:	bf00      	nop
 80041ac:	3720      	adds	r7, #32
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	2000017c 	.word	0x2000017c
 80041b8:	20000130 	.word	0x20000130
 80041bc:	20000134 	.word	0x20000134
 80041c0:	200000a0 	.word	0x200000a0
 80041c4:	20000180 	.word	0x20000180
 80041c8:	20000164 	.word	0x20000164
 80041cc:	20000198 	.word	0x20000198

080041d0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3b04      	subs	r3, #4
 80041e0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3b04      	subs	r3, #4
 80041ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f023 0201 	bic.w	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b04      	subs	r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004200:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <pxPortInitialiseStack+0x64>)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3b14      	subs	r3, #20
 800420a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3b04      	subs	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f06f 0202 	mvn.w	r2, #2
 800421e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3b20      	subs	r3, #32
 8004224:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004226:	68fb      	ldr	r3, [r7, #12]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	08004239 	.word	0x08004239

08004238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	607b      	str	r3, [r7, #4]
}
 8004254:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004256:	bf00      	nop
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0fc      	beq.n	8004258 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800426c:	4808      	ldr	r0, [pc, #32]	; (8004290 <prvPortStartFirstTask+0x24>)
 800426e:	6800      	ldr	r0, [r0, #0]
 8004270:	6800      	ldr	r0, [r0, #0]
 8004272:	f380 8808 	msr	MSP, r0
 8004276:	f04f 0000 	mov.w	r0, #0
 800427a:	f380 8814 	msr	CONTROL, r0
 800427e:	b662      	cpsie	i
 8004280:	b661      	cpsie	f
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	df00      	svc	0
 800428c:	bf00      	nop
 800428e:	0000      	.short	0x0000
 8004290:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop

08004298 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <xPortStartScheduler+0x5c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	607b      	str	r3, [r7, #4]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80042a4:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <xPortStartScheduler+0x60>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <xPortStartScheduler+0x60>)
 80042aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ae:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <xPortStartScheduler+0x60>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a10      	ldr	r2, [pc, #64]	; (80042f8 <xPortStartScheduler+0x60>)
 80042b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <xPortStartScheduler+0x64>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80042c2:	f000 f855 	bl	8004370 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80042c6:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <xPortStartScheduler+0x68>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80042cc:	f000 f86a 	bl	80043a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <xPortStartScheduler+0x6c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0b      	ldr	r2, [pc, #44]	; (8004304 <xPortStartScheduler+0x6c>)
 80042d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80042dc:	f7ff ffc6 	bl	800426c <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80042e0:	f7ff fc2e 	bl	8003b40 <vTaskSwitchContext>
    prvTaskExitError();
 80042e4:	f7ff ffa8 	bl	8004238 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	e000ed08 	.word	0xe000ed08
 80042f8:	e000ed20 	.word	0xe000ed20
 80042fc:	e000ed1c 	.word	0xe000ed1c
 8004300:	20000010 	.word	0x20000010
 8004304:	e000ef34 	.word	0xe000ef34

08004308 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
    __asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	607b      	str	r3, [r7, #4]
}
 8004320:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <vPortEnterCritical+0x30>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3301      	adds	r3, #1
 8004328:	4a03      	ldr	r2, [pc, #12]	; (8004338 <vPortEnterCritical+0x30>)
 800432a:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	20000010 	.word	0x20000010

0800433c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <vPortExitCritical+0x30>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3b01      	subs	r3, #1
 8004348:	4a08      	ldr	r2, [pc, #32]	; (800436c <vPortExitCritical+0x30>)
 800434a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800434c:	4b07      	ldr	r3, [pc, #28]	; (800436c <vPortExitCritical+0x30>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <vPortExitCritical+0x24>
 8004354:	2300      	movs	r3, #0
 8004356:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800435e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	20000010 	.word	0x20000010

08004370 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004374:	4b08      	ldr	r3, [pc, #32]	; (8004398 <vPortSetupTimerInterrupt+0x28>)
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800437a:	4b08      	ldr	r3, [pc, #32]	; (800439c <vPortSetupTimerInterrupt+0x2c>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <vPortSetupTimerInterrupt+0x30>)
 8004382:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8004386:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <vPortSetupTimerInterrupt+0x28>)
 800438a:	2207      	movs	r2, #7
 800438c:	601a      	str	r2, [r3, #0]
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	e000e010 	.word	0xe000e010
 800439c:	e000e018 	.word	0xe000e018
 80043a0:	e000e014 	.word	0xe000e014

080043a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80043a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043b4 <vPortEnableVFP+0x10>
 80043a8:	6801      	ldr	r1, [r0, #0]
 80043aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043ae:	6001      	str	r1, [r0, #0]
 80043b0:	4770      	bx	lr
 80043b2:	0000      	.short	0x0000
 80043b4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop

080043bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d022      	beq.n	8004414 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80043ce:	2308      	movs	r3, #8
 80043d0:	43db      	mvns	r3, r3
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d81b      	bhi.n	8004410 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80043d8:	2208      	movs	r2, #8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4413      	add	r3, r2
 80043de:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d014      	beq.n	8004414 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	f1c3 0308 	rsb	r3, r3, #8
 80043f4:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	43db      	mvns	r3, r3
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d804      	bhi.n	800440a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	607b      	str	r3, [r7, #4]
 8004408:	e004      	b.n	8004414 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	e001      	b.n	8004414 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004414:	f7ff f98a 	bl	800372c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004418:	4b3a      	ldr	r3, [pc, #232]	; (8004504 <pvPortMalloc+0x148>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004420:	f000 f8b8 	bl	8004594 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	db64      	blt.n	80044f4 <pvPortMalloc+0x138>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d061      	beq.n	80044f4 <pvPortMalloc+0x138>
 8004430:	4b35      	ldr	r3, [pc, #212]	; (8004508 <pvPortMalloc+0x14c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	d85c      	bhi.n	80044f4 <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800443a:	4b34      	ldr	r3, [pc, #208]	; (800450c <pvPortMalloc+0x150>)
 800443c:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 800443e:	4b33      	ldr	r3, [pc, #204]	; (800450c <pvPortMalloc+0x150>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8004444:	e004      	b.n	8004450 <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	d903      	bls.n	8004462 <pvPortMalloc+0xa6>
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f1      	bne.n	8004446 <pvPortMalloc+0x8a>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004462:	4b28      	ldr	r3, [pc, #160]	; (8004504 <pvPortMalloc+0x148>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	429a      	cmp	r2, r3
 800446a:	d043      	beq.n	80044f4 <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2208      	movs	r2, #8
 8004472:	4413      	add	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	1ad2      	subs	r2, r2, r3
 8004486:	2308      	movs	r3, #8
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	429a      	cmp	r2, r3
 800448c:	d913      	bls.n	80044b6 <pvPortMalloc+0xfa>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	1ad2      	subs	r2, r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044b6:	4b14      	ldr	r3, [pc, #80]	; (8004508 <pvPortMalloc+0x14c>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	4a11      	ldr	r2, [pc, #68]	; (8004508 <pvPortMalloc+0x14c>)
 80044c2:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044c4:	4b10      	ldr	r3, [pc, #64]	; (8004508 <pvPortMalloc+0x14c>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	4b11      	ldr	r3, [pc, #68]	; (8004510 <pvPortMalloc+0x154>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d203      	bcs.n	80044d8 <pvPortMalloc+0x11c>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044d0:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <pvPortMalloc+0x14c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a0e      	ldr	r2, [pc, #56]	; (8004510 <pvPortMalloc+0x154>)
 80044d6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80044ea:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <pvPortMalloc+0x158>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3301      	adds	r3, #1
 80044f0:	4a08      	ldr	r2, [pc, #32]	; (8004514 <pvPortMalloc+0x158>)
 80044f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80044f4:	f7ff f928 	bl	8003748 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 80044f8:	697b      	ldr	r3, [r7, #20]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	200045ac 	.word	0x200045ac
 8004508:	200045b0 	.word	0x200045b0
 800450c:	200045a4 	.word	0x200045a4
 8004510:	200045b4 	.word	0x200045b4
 8004514:	200045b8 	.word	0x200045b8

08004518 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d02b      	beq.n	8004582 <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800452a:	2308      	movs	r3, #8
 800452c:	425b      	negs	r3, r3
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4413      	add	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	0fdb      	lsrs	r3, r3, #31
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01c      	beq.n	8004582 <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d118      	bne.n	8004582 <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800455c:	f7ff f8e6 	bl	800372c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	4b09      	ldr	r3, [pc, #36]	; (800458c <vPortFree+0x74>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4413      	add	r3, r2
 800456a:	4a08      	ldr	r2, [pc, #32]	; (800458c <vPortFree+0x74>)
 800456c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800456e:	68b8      	ldr	r0, [r7, #8]
 8004570:	f000 f86a 	bl	8004648 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004574:	4b06      	ldr	r3, [pc, #24]	; (8004590 <vPortFree+0x78>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3301      	adds	r3, #1
 800457a:	4a05      	ldr	r2, [pc, #20]	; (8004590 <vPortFree+0x78>)
 800457c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800457e:	f7ff f8e3 	bl	8003748 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	200045b0 	.word	0x200045b0
 8004590:	200045bc 	.word	0x200045bc

08004594 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800459a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800459e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80045a0:	4b24      	ldr	r3, [pc, #144]	; (8004634 <prvHeapInit+0xa0>)
 80045a2:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00c      	beq.n	80045c8 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3307      	adds	r3, #7
 80045b2:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0307 	bic.w	r3, r3, #7
 80045ba:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	4a1c      	ldr	r2, [pc, #112]	; (8004634 <prvHeapInit+0xa0>)
 80045c4:	4413      	add	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a1b      	ldr	r2, [pc, #108]	; (8004638 <prvHeapInit+0xa4>)
 80045cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80045ce:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <prvHeapInit+0xa4>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80045dc:	2208      	movs	r2, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f023 0307 	bic.w	r3, r3, #7
 80045ea:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a13      	ldr	r2, [pc, #76]	; (800463c <prvHeapInit+0xa8>)
 80045f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <prvHeapInit+0xa8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2200      	movs	r2, #0
 80045f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <prvHeapInit+0xa8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	1ad2      	subs	r2, r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <prvHeapInit+0xa8>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4a08      	ldr	r2, [pc, #32]	; (8004640 <prvHeapInit+0xac>)
 800461e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4a07      	ldr	r2, [pc, #28]	; (8004644 <prvHeapInit+0xb0>)
 8004626:	6013      	str	r3, [r2, #0]
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	200001a4 	.word	0x200001a4
 8004638:	200045a4 	.word	0x200045a4
 800463c:	200045ac 	.word	0x200045ac
 8004640:	200045b4 	.word	0x200045b4
 8004644:	200045b0 	.word	0x200045b0

08004648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004650:	4b28      	ldr	r3, [pc, #160]	; (80046f4 <prvInsertBlockIntoFreeList+0xac>)
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e002      	b.n	800465c <prvInsertBlockIntoFreeList+0x14>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	429a      	cmp	r2, r3
 8004664:	d8f7      	bhi.n	8004656 <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4413      	add	r3, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	d108      	bne.n	800468a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	441a      	add	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	441a      	add	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d118      	bne.n	80046d0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <prvInsertBlockIntoFreeList+0xb0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d00d      	beq.n	80046c6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	441a      	add	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	e008      	b.n	80046d8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80046c6:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <prvInsertBlockIntoFreeList+0xb0>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e003      	b.n	80046d8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d002      	beq.n	80046e6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046e6:	bf00      	nop
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	200045a4 	.word	0x200045a4
 80046f8:	200045ac 	.word	0x200045ac

080046fc <memset>:
 80046fc:	4402      	add	r2, r0
 80046fe:	4603      	mov	r3, r0
 8004700:	4293      	cmp	r3, r2
 8004702:	d100      	bne.n	8004706 <memset+0xa>
 8004704:	4770      	bx	lr
 8004706:	f803 1b01 	strb.w	r1, [r3], #1
 800470a:	e7f9      	b.n	8004700 <memset+0x4>

0800470c <__libc_init_array>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	4d0d      	ldr	r5, [pc, #52]	; (8004744 <__libc_init_array+0x38>)
 8004710:	4c0d      	ldr	r4, [pc, #52]	; (8004748 <__libc_init_array+0x3c>)
 8004712:	1b64      	subs	r4, r4, r5
 8004714:	10a4      	asrs	r4, r4, #2
 8004716:	2600      	movs	r6, #0
 8004718:	42a6      	cmp	r6, r4
 800471a:	d109      	bne.n	8004730 <__libc_init_array+0x24>
 800471c:	4d0b      	ldr	r5, [pc, #44]	; (800474c <__libc_init_array+0x40>)
 800471e:	4c0c      	ldr	r4, [pc, #48]	; (8004750 <__libc_init_array+0x44>)
 8004720:	f000 f826 	bl	8004770 <_init>
 8004724:	1b64      	subs	r4, r4, r5
 8004726:	10a4      	asrs	r4, r4, #2
 8004728:	2600      	movs	r6, #0
 800472a:	42a6      	cmp	r6, r4
 800472c:	d105      	bne.n	800473a <__libc_init_array+0x2e>
 800472e:	bd70      	pop	{r4, r5, r6, pc}
 8004730:	f855 3b04 	ldr.w	r3, [r5], #4
 8004734:	4798      	blx	r3
 8004736:	3601      	adds	r6, #1
 8004738:	e7ee      	b.n	8004718 <__libc_init_array+0xc>
 800473a:	f855 3b04 	ldr.w	r3, [r5], #4
 800473e:	4798      	blx	r3
 8004740:	3601      	adds	r6, #1
 8004742:	e7f2      	b.n	800472a <__libc_init_array+0x1e>
 8004744:	08004800 	.word	0x08004800
 8004748:	08004800 	.word	0x08004800
 800474c:	08004800 	.word	0x08004800
 8004750:	08004804 	.word	0x08004804

08004754 <memcpy>:
 8004754:	440a      	add	r2, r1
 8004756:	4291      	cmp	r1, r2
 8004758:	f100 33ff 	add.w	r3, r0, #4294967295
 800475c:	d100      	bne.n	8004760 <memcpy+0xc>
 800475e:	4770      	bx	lr
 8004760:	b510      	push	{r4, lr}
 8004762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800476a:	4291      	cmp	r1, r2
 800476c:	d1f9      	bne.n	8004762 <memcpy+0xe>
 800476e:	bd10      	pop	{r4, pc}

08004770 <_init>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	bf00      	nop
 8004774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004776:	bc08      	pop	{r3}
 8004778:	469e      	mov	lr, r3
 800477a:	4770      	bx	lr

0800477c <_fini>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	bf00      	nop
 8004780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004782:	bc08      	pop	{r3}
 8004784:	469e      	mov	lr, r3
 8004786:	4770      	bx	lr
